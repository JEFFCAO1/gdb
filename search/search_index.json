{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"A browser-based frontend to gdb (gnu debugger)  <p><code>gdbgui</code> is a browser-based frontend to <code>gdb</code>, the gnu debugger. You can add breakpoints, view stack traces, and more in C, C++, Go, and Rust!</p> <p>It's perfect for beginners and experts. Simply run <code>gdbgui</code> from the terminal to start the gdbgui server, and a new tab will open in your browser.</p> <p>Sound Good? Get started with installation.</p>"},{"location":"#testimonials","title":"Testimonials","text":"<p>\"Definitely worth checking out.\"</p>  \u2014Jason Turner, host of C++ weekly on YouTube <p>\"Seriously, great front-end to gdb for those of us who are not always using a full IDE. Great project.\"</p>  \u2014Jefferson on Twitter <p>\"Where were you all my life? And why did I use DDD?\"</p>  \u2014Mario Zechner, author, game engine developer on Twitter <p>gdbgui is used by thousands of developers around the world including engineers at Google and college computer science course instructions. It even made its way into the Rust programming language's source code and appeared on episode 110 of C++ Weekly.</p>"},{"location":"#license","title":"License","text":"<p>gdbgui's license is GNU GPLv3. To summarize it, you</p> <ul> <li>can use it for free at work or for personal use</li> <li>can modify its source code</li> <li>must disclose your source code if you redistribute any part of gdbgui</li> </ul>"},{"location":"#distribution","title":"Distribution","text":"<p>gdbgui is distributed through</p> <ul> <li>github (https://github.com/cs01/gdbgui)</li> <li>PyPI</li> </ul>"},{"location":"#authors","title":"Authors","text":"<ul> <li>Chad Smith, creator/maintainer</li> <li>@bobthekingofegypt, contibutor</li> <li>Community contributions</li> </ul>"},{"location":"#donate","title":"Donate","text":"<p>Paypal</p>"},{"location":"#contact","title":"Contact","text":"<p>https://chadsmith.dev chadsmith.software@gmail.com</p>"},{"location":"api/","title":"API","text":"<p>This is the command line help output of gdbgui.</p> <pre><code>usage: gdbgui [-h] [-g GDB_CMD] [-p PORT] [--host HOST] [-r]\n              [--auth-file AUTH_FILE] [--user USER] [--password PASSWORD]\n              [--key KEY] [--cert CERT] [--remap-sources REMAP_SOURCES]\n              [--project PROJECT] [-v] [-n] [-b BROWSER] [--debug]\n              [--args ...]\n              [debug_program]\n\nA server that provides a graphical user interface to the gnu debugger (gdb).\nhttps://github.com/cs01/gdbgui\n\npositional arguments:\n  debug_program         The executable file you wish to debug, and any\n                        arguments to pass to it. To pass flags to the\n                        binary, wrap in quotes, or use --args instead.\n                        Example: gdbgui ./mybinary [other-gdbgui-args...]\n                        Example: gdbgui './mybinary myarg -flag1 -flag2'\n                        [other gdbgui args...] (default: None)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --args ...            Specify the executable file you wish to debug and\n                        any arguments to pass to it. All arguments are taken\n                        literally, so if used, this must be the last\n                        argument. This can also be specified later in the\n                        frontend. passed to gdbgui. Example: gdbgui [...]\n                        --args ./mybinary myarg -flag1 -flag2 (default: [])\n\ngdb settings:\n  -g GDB_CMD, --gdb-cmd GDB_CMD\n                        gdb binary and arguments to run. If passing\n                        arguments, enclose in quotes. If using rr, it should\n                        be specified here with 'rr replay'. Examples: gdb,\n                        /path/to/gdb, 'gdb --command=FILE -ix', 'rr replay'\n                        (default: gdb)\n\ngdbgui network settings:\n  -p PORT, --port PORT  The port on which gdbgui will be hosted (default:\n                        5000)\n  --host HOST           The host ip address on which gdbgui serve (default:\n                        127.0.0.1)\n  -r, --remote          Shortcut to set host to 0.0.0.0 and suppress browser\n                        from opening. This allows remote access to gdbgui\n                        and is useful when running on a remote machine that\n                        you want to view/debug from your local browser, or\n                        let someone else debug your application remotely.\n                        (default: False)\n\nsecurity settings:\n  --auth-file AUTH_FILE\n                        Require authentication before accessing gdbgui in\n                        the browser. Specify a file that contains the HTTP\n                        Basic auth username and password separate by\n                        newline. (default: None)\n  --user USER           Username when authenticating (default: None)\n  --password PASSWORD   Password when authenticating (default: None)\n  --key KEY             SSL private key. Generate with:openssl req -newkey\n                        rsa:2048 -nodes -keyout host.key -x509 -days 365\n                        -out host.cert (default: None)\n  --cert CERT           SSL certificate. Generate with:openssl req -newkey\n                        rsa:2048 -nodes -keyout host.key -x509 -days 365\n                        -out host.cert (default: None)\n\nother settings:\n  --remap-sources REMAP_SOURCES, -m REMAP_SOURCES\n                        Replace compile-time source paths to local source\n                        paths. Pass valid JSON key/value pairs.i.e. --remap-\n                        sources='{\"/buildmachine\": \"/current/machine\"}'\n                        (default: None)\n  --project PROJECT     Set the project directory. When viewing the\n                        \"folders\" pane, paths are shown relative to this\n                        directory. (default: None)\n  -v, --version         Print version (default: False)\n  -n, --no-browser      By default, the browser will open with gdbgui. Pass\n                        this flag so the browser does not open. (default:\n                        False)\n  -b BROWSER, --browser BROWSER\n                        Use the given browser executable instead of the\n                        system default. (default: None)\n  --debug               The debug flag of this Flask application. Pass this\n                        flag when debugging gdbgui itself to automatically\n                        reload the server when changes are detected\n                        (default: False)\n</code></pre>"},{"location":"changelog/","title":"gdbgui release history","text":""},{"location":"changelog/#01520","title":"0.15.2.0","text":"<ul> <li>Update default python version to 3.12</li> <li>utf-8 decode error bugfix</li> <li>fix registers cannot be displayed bug</li> </ul>"},{"location":"changelog/#01510","title":"0.15.1.0","text":"<ul> <li>Compatibility with Werkzeug 2.1. Use the eventlet server instead of   the Werkzeug development server.</li> <li>Use pinned requirements instead of abstract requirements to ensure reproducability of pip installs</li> </ul>"},{"location":"changelog/#01501","title":"0.15.0.1","text":"<p>This release has no changes to features or usability. The only change is to include a file used by other package maintainers.</p> <ul> <li>Include all files needed to rebuild from source (#403)</li> </ul>"},{"location":"changelog/#01500","title":"0.15.0.0","text":"<p>This release is focused mostly on Python 3.9 compatibility and updating dependencies</p> <ul> <li>Support only Python 3.9 (though other Python versions may still work)</li> <li>Build gdbgui as a pex executable.</li> <li>These are executable Python environments that are self-contained with the exception of requiring a specific Python version installed in the environment running the executable. The pex executables should have better compatibility than PyInstaller executables, which sometimes have missing shared libraries depending on the operating system.</li> <li>Use only the threading async model for flask-socketio. No longer support gevent or eventlet.</li> <li>[bugfix] Catch exception if gdb used in tty window crashes instead of gdbgui crashing along with it</li> <li>Disable pagination in gdb tty by default. It can be turned back on with <code>set pagination off</code>.</li> <li>Upgrade various dependencies for both the backend and frontend (Python and JavaScript)</li> <li>Display gdbgui version in \"about\" and \"session information\"</li> </ul>"},{"location":"changelog/#01402","title":"0.14.0.2","text":"<ul> <li>Pinned python-socketio version</li> <li>Pinned mypy version to unbreak linting</li> <li>Fixed reverse debugging commands that were broken when <code>--gdb</code> flag was removed</li> </ul>"},{"location":"changelog/#01401","title":"0.14.0.1","text":"<ul> <li>Fix import paths</li> <li>Pin broken dependency to avoid segfault</li> <li>Hide \"No registers.\" message</li> </ul>"},{"location":"changelog/#01400","title":"0.14.0.0","text":"<p>Breaking Changes</p> <ul> <li>Removed support for Windows</li> <li>Replaced <code>--gdb</code> flag with <code>--gdb-cmd</code>. The <code>--gdb-cmd</code> argument specifies the gdb executable as well as all arguments you wish to pass to gdb at startup, for example <code>--gdb-cmd \"gdb -nx\"</code>. The existing <code>-g</code> argument is an alias for <code>--gdb-cmd</code>.</li> <li>Removed <code>--rr</code> flag. Use <code>--gdb-cmd \"rr replay --\"</code> instead.</li> <li>Removed deprecated and hidden <code>--hide-gdbgui-upgrades</code> argument. It will now raise an error.</li> </ul> <p>Additional Changes</p> <ul> <li>Replaced single terminal on frontend with three terminals: an interactive xterm terminal running gdb, a gdbgui console for diagnostic messages, and a terminal connected to the inferior application being debugged.</li> <li>Updates to the dashboard</li> <li>Add ability to specify gdb command from the browser. This can now be accomplished from the dashboard.</li> <li>Removed gdbgui binaries from source control. They can now be downloaded as artifacts of releases.</li> <li>[documentation] Fix bug when generating md5 checksum for binary releases</li> <li>Remove \"shutdown\" button in UI</li> </ul>"},{"location":"changelog/#01321","title":"0.13.2.1","text":"<ul> <li>No end user changes. This release builds the gdbgui executables with GitHub actions.</li> </ul>"},{"location":"changelog/#01320","title":"0.13.2.0","text":"<ul> <li>Print number of times a breakpoint was hit (@MatthiasKreileder).</li> <li>Publish sdist to PyPI (this was overlooked in previous release).</li> <li>Do not notify users of gdbgui upgrades (deprecate <code>--hide-gdbgui-upgrades</code> flag)</li> <li>Drop support for Python 3.4</li> <li>[dev] Some infrastructure changes to gdbgui. End users should not be affected.</li> <li>[dev] Fix build error due to webpack bug (https://github.com/webpack/webpack/issues/8082).</li> </ul>"},{"location":"changelog/#01312","title":"0.13.1.2","text":"<ul> <li>Exclude \"tests\" directory from Python package</li> <li>Remove analytics from documentation</li> </ul>"},{"location":"changelog/#01311","title":"0.13.1.1","text":"<ul> <li>Add <code>__main__</code> entrypoint</li> </ul>"},{"location":"changelog/#01310","title":"0.13.1.0","text":"<ul> <li>Remove automatic flushing of stdout and require newer version of pygdbmi</li> <li>Add flake8 tests to CI build</li> </ul>"},{"location":"changelog/#01300","title":"0.13.0.0","text":"<ul> <li>Add ability to re-map source file paths. Added flags <code>--remap-sources</code> and <code>-m</code> to replace compile-time source paths to local source paths. i.e. <code>gdbgui --remap-sources='{\"/buildmachine\": \"/home/chad\"}'</code> (#158)</li> <li>Add shift keyboard shortcut to go in reverse when using rr (#201)</li> <li>Pass arbitrary gdb arguments directly to gdb: added <code>--gdb-args</code> flag</li> <li>Removed <code>-x</code> CLI option, which caused major version to change. New way to pass is <code>gdbgui --gdb-args='-x=FILE'</code> (#205)</li> <li>Add \"name\" to Threads (new gdb 8.1 feature) (@P4Cu)</li> <li>Fix crash/black screen from \"Python Exception  name long is not defined\" #212 <li>Fix bug when debugging filenames with spaces (Fix Cannot create breakpoint: -break-insert: Garbage following  #211\") <li>Fix empty frame causes the ui to crash/black screen #216</li> <li>Update npm packages; update react to 16.4</li> <li>Update prettier rules</li> <li>Update tour text + fix typo in tour (@nkirkby)</li>"},{"location":"changelog/#01200","title":"0.12.0.0","text":"<ul> <li>Add pause button</li> <li>Update command line parsing for cmd and --args, change arguments from underscore to hyphen, add option to specify browser (@fritzr)</li> <li>Add tour</li> <li>Run <code>set breakpoint pending on</code> on initial connection</li> <li>Allow signal to be sent to arbitrary PIDs</li> <li>Fix bug when sending signals in Python2</li> <li>Move signal component lower in side pane</li> <li>Update Rust documentation</li> <li>Make requirements.txt point to setup.py's dependencies</li> </ul>"},{"location":"changelog/#01131","title":"0.11.3.1","text":"<ul> <li>Limit maximum Flask version to prevent <code>Session expired. Please refresh this webpage.</code> error</li> <li>Rename \"premium\" to \"ad-free\"</li> <li>Do smarter version checking</li> <li>Fix bug when trying to view \"about\"</li> </ul>"},{"location":"changelog/#01130","title":"0.11.3.0","text":"<ul> <li>ensure expressions with hex values are parsed and updated appropriately (#182)</li> <li>improve command line arguments</li> <li>use python logging module</li> </ul>"},{"location":"changelog/#01121","title":"0.11.2.1","text":"<ul> <li>Small bugfix for specific platforms when reading version number</li> </ul>"},{"location":"changelog/#01120","title":"0.11.2.0","text":"<ul> <li>add option to remove fflush command (#179)</li> <li>remove react-treebeard and render filesystem w/ new component</li> </ul>"},{"location":"changelog/#01111","title":"0.11.1.1","text":"<ul> <li>Bugfix displaying upgrade text</li> </ul>"},{"location":"changelog/#01110","title":"0.11.1.0","text":"<ul> <li>Add csrf and cross origin protection</li> <li>Convert backslashes to forward slashes when entering windows binary paths (#167)</li> <li>Fix safari ui issue (#164)</li> <li>Update text on reload file button, and disable when no file is loaded (#165)</li> <li>When disassembly can't be fetched in mode 4, fetch in mode 3 and assume gdb version is 7.6.0 (#166)</li> <li>Add copy to clipboard icon for files and variables</li> <li>Allow SSL module import to fail and print warning (#170)</li> <li>Cleanup menu, add license info, bugfixes, etc. (#169, #136, #163, #172)</li> </ul>"},{"location":"changelog/#01100","title":"0.11.0.0","text":"<ul> <li>Replace <code>--auth</code> cli option with <code>--user</code> and <code>--password</code></li> </ul>"},{"location":"changelog/#01030","title":"0.10.3.0","text":"<ul> <li>Added resizer buttons to components on right pane</li> </ul>"},{"location":"changelog/#01021","title":"0.10.2.1","text":"<ul> <li>Add link for fix for macOS users</li> <li>Update version of React to 16.2</li> <li>Remove unused links</li> </ul>"},{"location":"changelog/#01020","title":"0.10.2.0","text":"<ul> <li>Add folders view, rearrange layout (@martin-der)</li> <li>Add settings cog button</li> <li>Add message when sending signal to inferior process (#156)</li> <li>Change default theme to monokai, rename 'default' theme to 'light'</li> <li>Minor bugfixes</li> </ul>"},{"location":"changelog/#01010","title":"0.10.1.0","text":"<ul> <li>Display descriptions of registers</li> <li>Do not try to fetch Registers when they cannot be read</li> </ul>"},{"location":"changelog/#01002","title":"0.10.0.2","text":"<ul> <li>Add support for rr (--rr flag)</li> <li>Add dashboard to connect to/kill existing gdb processes</li> <li>Add option to specify SSL key and certificate to enable https</li> <li>Add option to connect to process</li> <li>Add option to connect to gdbserver</li> <li>Add infinite scrolling</li> </ul>"},{"location":"changelog/#0941","title":"0.9.4.1","text":"<ul> <li>Remove <code>pypugjs</code> dependency</li> </ul>"},{"location":"changelog/#0940","title":"0.9.4.0","text":"<ul> <li>Add native Windows support (no longer relies on Cygwin)</li> </ul>"},{"location":"changelog/#0930","title":"0.9.3.0","text":"<ul> <li>Only display assembly flavor is assembly is displayed</li> <li>Add new output type to console (gdbgui output)</li> <li>Add dashboard link and dropdown for gdb server/pid attach</li> <li>Handle invalid signal choice better</li> <li>Print gdb mi log messages to console</li> <li>Remove localStorage keys when they are invalid</li> </ul>"},{"location":"changelog/#0920","title":"0.9.2.0","text":"<ul> <li>Add signals component and allow signals to be sent to gdb (issue ##141)</li> <li>Fix bug when jumping to line of source file</li> </ul>"},{"location":"changelog/#0911","title":"0.9.1.1","text":"<ul> <li>Fix bug when passing arguments to gdb</li> <li>Require latest version of pygdbmi for faster parsing of large gdb output</li> </ul>"},{"location":"changelog/#0910","title":"0.9.1.0","text":"<ul> <li>Lazily load files (issue #131)</li> <li>Update setup.py to build wheels</li> </ul>"},{"location":"changelog/#0901","title":"0.9.0.1","text":"<ul> <li>Reupload to fix setup.cfg PyPI bug</li> </ul>"},{"location":"changelog/#0900","title":"0.9.0.0","text":"<ul> <li>Compress responses from server (massive bandwidth improvement)</li> <li>Add button to toggle assembly flavors (issue #110)</li> <li>Parse executable+args with spaces (issue #116)</li> <li>Turn modals into components</li> <li>Move everything into a single root React component</li> <li>Refresh state when clicking \"return\" button</li> <li>Add javascript unit tests</li> </ul>"},{"location":"changelog/#0820","title":"0.8.2.0","text":"<ul> <li>Add optional authentication (@nickamon, issue #132)</li> <li>Support the <code>--args</code> flag (issue #126)</li> <li>Ensure code is correct and adheres to recommended Python style when running tests/building (flake8)</li> <li>Display source when running <code>backtrace</code> (fix regression, #134)</li> </ul>"},{"location":"changelog/#0810","title":"0.8.1.0","text":"<ul> <li>Add autocomplete functionality (@bobthekingofegypt, issue #129)</li> <li>Rearranged and improved alignment of assembly</li> <li>Fixed bug when fetching variable fails</li> <li>Plot floating point values instead of casting to int</li> </ul>"},{"location":"changelog/#0803","title":"0.8.0.3","text":"<ul> <li>modify component initialization order so that store updates are better sequenced</li> </ul>"},{"location":"changelog/#0802","title":"0.8.0.2","text":"<ul> <li>display bracket instead of <code>&amp;lt;</code> when exploring gdb variables</li> </ul>"},{"location":"changelog/#0801","title":"0.8.0.1","text":"<ul> <li>fix bug when restoring old settings</li> </ul>"},{"location":"changelog/#0800","title":"0.8.0.0","text":"<ul> <li>Add ability to change radix of variables (issue #102)</li> <li>Add component to send signals to inferior program (issues #31, #90)</li> <li>Parse gdb version from arm-non-eabi-gdb (issue #83)</li> <li>Rewrite most components to React (issue #17)</li> <li>Improve CSS in various components</li> </ul>"},{"location":"changelog/#0795","title":"0.7.9.5","text":"<ul> <li>re-fetch registers if name/value count does not match</li> </ul>"},{"location":"changelog/#0794","title":"0.7.9.4","text":"<ul> <li>add inputs to resize Tree view</li> <li>add menu in top right</li> <li>css updates to preserve whitespace in terminal</li> <li>add top-level html to wrap body+head elements in gdbgui.pug</li> <li>add help file</li> <li>add donate page</li> </ul>"},{"location":"changelog/#0793","title":"0.7.9.3","text":"<ul> <li>Changes to layout</li> <li>Fix character escaping in breakpoint line display</li> </ul>"},{"location":"changelog/#0792","title":"0.7.9.2","text":"<ul> <li>Fix firefox css bug</li> <li>Update examples</li> <li>Update readme for windows (cygwin) users (thanks tgharib)</li> </ul>"},{"location":"changelog/#0791","title":"0.7.9.1","text":"<ul> <li>Collapse simple fields to the parent node in tree explorer</li> <li>Add button to re-enter program state when signals are received (i.e. SEGFAULT)</li> </ul>"},{"location":"changelog/#0790","title":"0.7.9.0","text":"<ul> <li>Add interactive tree explorer of variables</li> </ul>"},{"location":"changelog/#0783","title":"0.7.8.3","text":"<ul> <li>Remove optimization for fetching registers due to potential bug</li> </ul>"},{"location":"changelog/#0782","title":"0.7.8.2","text":"<ul> <li>bugfix in logic when jumping to source code line</li> <li>bugfix for when variable goes from<code>empty -&gt; 1 element</code></li> <li>add CODE OF CONDUCT, CONTRIBUTING, and CHANGELOG files</li> </ul>"},{"location":"changelog/#0781","title":"0.7.8.1","text":"<ul> <li>correctly display <code>&lt;</code> and <code>&gt;</code> in console widget</li> </ul>"},{"location":"changelog/#0780","title":"0.7.8.0","text":"<ul> <li>show disassembly when file is unknown or missing</li> <li>show new children in expressions widget when they are dynamically added by application (@wuyihao)</li> <li>suppress nuisance errors when hover variable or fflush command is not found</li> <li>improve logic when source code line should be jumped to</li> <li>escape brackets in disassembly, and gracefully hide missing opcodes</li> <li>update socketio version for more reliable websocket connection</li> </ul>"},{"location":"changelog/#0770","title":"0.7.7.0","text":"<ul> <li>Show variable values when hovering in source code</li> <li>gracefully handle hostname not being present in /etc/hosts when running with remote flag</li> <li>Use external state management library (<code>stator.js</code>) for client ui</li> </ul>"},{"location":"contact/","title":"Contact","text":"<ul> <li>Email: chadsmith.software@gmail.com</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thanks for your interest in contributing to gdbgui!</p> <p>If your change is small, go ahead and submit a pull request. If it is substantial, create a GitHub issue to discuss it before making the change.</p>"},{"location":"contributing/#dependencies","title":"Dependencies","text":"<p>1.) nox is used to automate various tasks. You will need it installed on your system before continuing.</p> <p>You can install it with pipx (recommended):</p> <pre><code>&gt; pipx install nox\n</code></pre> <p>or pip:</p> <pre><code>&gt; pip install --user nox\n</code></pre> <p>2.) yarn is used for managing JavaScript files</p>"},{"location":"contributing/#developing","title":"Developing","text":"<p>Development can be done with one simple step:</p> <pre><code>&gt; nox -s develop\n</code></pre> <p>This will install all Python and JavaScript dependencies, and build and watch Python and JavaScript files for changes, automatically reloading as things are changed.</p> <p>Make sure you turn your cache off so that changes made locally are reflected in the page.</p>"},{"location":"contributing/#running-and-adding-tests","title":"Running and Adding tests","text":"<pre><code>&gt; nox\n</code></pre> <p>runs all applicable tests and linting.</p> <p>Python tests are in <code>gdbgui/tests</code>. They are run as part of the above command, but can be run with</p> <pre><code>&gt; nox -s python_tests\n</code></pre> <p>JavaScript tests are in <code>gdbgui/src/js/tests</code>. They are run as part of the above command, but can be run with</p> <pre><code>&gt; nox -s js_tests\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#modifying-documentation","title":"Modifying Documentation","text":"<p>Documentation is made with <code>mkdocs</code>. Then make changes to <code>mkdocs.yml</code> or md files in the <code>docs</code> directory.</p> <p>To build docs, run</p> <pre><code>nox -s docs\n</code></pre> <p>To see a live preview of current documentation, run</p> <pre><code>nox -s watch_docs\n</code></pre>"},{"location":"contributing/#publishing-documentation","title":"Publishing Documentation","text":"<p>The generated documentation is published to the <code>gh-pages</code> branch.</p> <pre><code>nox -s publish_docs\n</code></pre>"},{"location":"contributing/#building-binary-executables","title":"Building Binary Executables","text":"<p>These are automatically built on CI, but can be built locally with corresponding <code>nox</code> commands, such as:</p> <pre><code>nox -s build_executables_current_platform\n</code></pre>"},{"location":"contributing/#publishing-a-new-version","title":"Publishing a New Version","text":"<ol> <li>Make sure the version number is incremented in <code>VERSION.txt</code>.</li> <li>The version to release must be on the master branch and have all CI tests pass and new binary executable artifacts attached to the GitHub action results</li> <li>Publish the package to PyPI and update documentation. Both are done with this <code>nox -s publish</code>.</li> <li>Create a \"release\" in GitHub and attach the gdbgui binary executable artifacts to it.</li> </ol>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#code-examples","title":"Code Examples","text":"<p>View code examples on GitHub.</p>"},{"location":"examples/#gdbgui-invocation-examples","title":"gdbgui Invocation Examples","text":"<p>launch gdbgui</p> <pre><code>gdbgui\n</code></pre> <p>set the inferior program, pass argument, set a breakpoint at main</p> <pre><code>gdbgui --args ./myprogram myarg -myflag\n</code></pre> <pre><code>gdbgui \"./myprogram myarg -myflag\"\n</code></pre> <p>use gdb binary not on your $PATH</p> <pre><code>gdbgui --gdb-cmd build/mygdb\n</code></pre> <p>Pass arbitrary arguments directly to gdb when it is launched</p> <pre><code>gdbgui --gdb-cmd=\"gdb -x gdbcmds.txt\"\n</code></pre> <p>run on port 8080 instead of the default port</p> <pre><code>gdbgui --port 8080\n</code></pre> <p>run on a server and host on 0.0.0.0. Accessible to the outside world as long as port 80 is not blocked.</p> <pre><code>gdbgui -r\n</code></pre> <p>Same as previous but will prompt for a username and password</p> <pre><code>gdbgui -r --auth\n</code></pre> <p>Same as previous but with encrypted https connection.</p> <pre><code>openssl req -newkey rsa:2048 -nodes -keyout private.key -x509 -days 365 -out host.cert\n</code></pre> <pre><code>gdbgui -r --auth --key private.key --cert host.cert\n</code></pre> <p>Use Mozilla's record and replay (rr) debugging supplement to gdb. rr lets your record a program (usually with a hard-to-reproduce bug in it), then deterministically replay it as many times as you want. You can even step forwards and backwards.</p> <pre><code>gdbgui --gdb-cmd \"rr replay --\"\n</code></pre> <p>Use recording other than the most recent one</p> <pre><code>gdbgui --gdb-cmd \"rr replay RECORDED_DIRECTORY --\"\n</code></pre> <p>Don't automatically open the browser when launching</p> <pre><code>gdbgui -n\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#how-can-i-see-what-commands-are-being-sent-to-gdb","title":"How can I see what commands are being sent to gdb?","text":"<p>Go to Settings and check the box that says <code>Print all sent commands in console, including those sent automatically by gdbgui</code></p>"},{"location":"faq/#how-can-i-see-gdbs-raw-output","title":"How can I see gdb's raw output?","text":"<p>Launch gdbgui with the debug flag, <code>gdbgui --debug</code>, then a new component will appear on the bottom right side of UI.</p>"},{"location":"faq/#can-i-use-a-different-gdb-executable","title":"Can I use a different gdb executable?","text":"<p>Yes, use <code>gdbgui -g &lt;gdb executable&gt;</code></p>"},{"location":"faq/#does-this-work-with-lldb","title":"Does this work with LLDB?","text":"<p>No, only gdb.</p>"},{"location":"faq/#can-this-debug-python","title":"Can this debug Python?","text":"<p>No. It uses gdb on the backend which does not debug Python code.</p>"},{"location":"faq/#how-do-i-make-program-output-appear-in-a-different-terminal","title":"How do I make program output appear in a different terminal?","text":"<p>On linux terminals are named. You can get a terminal's name by running <code>tty</code> which will print something like <code>/dev/ttys3</code>. Tell gdb to use the terminal gdbgui was launched from with</p> <pre><code>gdbgui --gdb-args=\"--tty=$(tty)\"\n</code></pre> <p>or if you want to set it from the UI after gdbgui has been opened, run</p> <pre><code>set inferior-tty /dev/ttys3  # replace /dev/ttys3 with desired tty name\n</code></pre>"},{"location":"faq/#help-there-isnt-a-button-for-something-i-want-to-do-what-should-i-do","title":"Help! There isn't a button for something I want to do. What should I do?","text":"<p>The vast majority of common use cases are handled in the UI, and to keep the UI somewhat simple I do not intend on making UI support for every single gdb command. You can search gdb documentation and use any gdb command you want in the console at the bottom of the window. If you think there should be a UI element for a command or function, create an issue on GitHub and I will consider it.</p>"},{"location":"gettingstarted/","title":"Getting Started","text":"<p>Before running <code>gdbgui</code>, you should compile your program with debug symbols and a lower level of optimization, so code isn't optimized out before runtime. To include debug symbols with <code>gcc</code> use <code>-ggdb</code>, with <code>rustc</code> use <code>-g</code>. To disable most optimizations in <code>gcc</code> use the <code>-O0</code> flag, with <code>rustc</code> use <code>-O</code>.</p> <p>For more details, consult your compiler's documentation or a search engine.</p> <p>Now that you have <code>gdbgui</code> installed and your program compiled with debug symbols, all you need to do is run</p> <pre><code>gdbgui\n</code></pre> <p>This will start gdbgui's server and open a new tab in your browser. That tab contains a fully functional frontend running <code>gdb</code>!</p> <p>You can see gdbgui in action on YouTube.</p> <p>To see the full list of options gdbgui offers, you can view command line options by running</p> <pre><code>gdbgui --help\n</code></pre> <p>If you have a question about something</p> <ul> <li>Read documentation on the homepage</li> <li>Ask question in an issue on github</li> </ul>"},{"location":"gettingstarted/#settings","title":"Settings","text":"<p><code>gdbgui</code> settings can be accessed by clicking the gear icon in the top right of the frontend. Most of these settings persist between sessions for a given url and port.</p>"},{"location":"gettingstarted/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>The following keyboard shortcuts are available when the focus is not in an input field. They have the same effect as when the button is pressed.</p> <ul> <li>Run: r</li> <li>Continue: c</li> <li>Next: n or right arrow</li> <li>Step: s or down arrow</li> <li>Up: u or up arrow</li> <li>Next Instruction: m</li> <li>Step Instruction: ,</li> </ul>"},{"location":"guides/","title":"Guides","text":"<p>gdb can be used in a plethora of environments. These guides help you get gdb and gdbgui working in specific environments.</p> <p>Remember, these guides, like gdbgui, are open source and can be edited by you, the users! See contributing to modify these docs.</p>"},{"location":"guides/#running-locally","title":"Running Locally","text":"<p>After downloading gdbgui, you can launch it like so:</p> <ul> <li><code>gdbgui</code> (or whatever the binary name is, i.e. <code>gdbgui_0.10.0.0</code>)</li> <li><code>gdbgui --args ./mybinary -myarg value -flag1 -flag2</code></li> </ul> <p>Make sure the program you want to debug was compiled with debug symbols. See the getting started section for more details.</p> <p>A new tab in your browser will open with gdbgui in it. If a browser tab did not open, navigate to the ip/port that gdbgui is being served on (i.e. http://localhost:5000).</p> <p>Now that gdbgui is open, you can interactively run a program with it. * Type the path to the executable in the input at the top (next to \"Load Binary\"). The executable should already exist and have been compiled with the <code>-g</code> flag. * Click <code>Load Binary</code>. The program and symbols will load, but will not begin running. A breakpoint will be added to main automatically. This can be changed in settings if you prefer not to do this. * The line of source code corresponding to main will display if the program was compiled with the <code>-g</code> flag debug symbols. * Click the Run button, which is on the top right and looks like a circular arrow. * Step through the program by clicking the Next, Step, Continue, icons as desired. These are also on the top right.</p> <p>For a list of gdbgui arguments, run <code>gdbgui --help</code>.</p>"},{"location":"guides/#running-remotely","title":"Running Remotely","text":"<p>Because gdbgui is a server, it naturally allows you to debug programs running on other computers.</p> <ul> <li>ssh into the computer with the program that needs to be debugged.</li> <li>run <code>gdbgui -r</code> on the remote machine (this will serve publicly so beware of security here)</li> <li>on your local machine, open your browser and access the remote machine's ip and port</li> <li>debug the remote computer in your local browser</li> </ul> <p>Note that gnu also distrubutes a program called <code>gdbserver</code> which gdbgui is compatible with. See the relevant section in this doc.</p>"},{"location":"guides/#debugging-rust-programs","title":"Debugging Rust Programs","text":"<p><code>gdbgui</code> can be used to debug programs written in Rust. Assuming you use Cargo to create a new program and build it in Debug mode in the standard way:</p> <pre><code>cargo new myprog\ncd myprog\ncargo build\n</code></pre> <p>You can start debugging with</p> <pre><code>gdbgui --args target/debug/myprog\n</code></pre> <p>There are a couple of small difficulties.</p> <p>1.) Instead of showing your <code>main</code> function the initial screen will be blank and <code>gdbgui</code> will print <code>File not found: main</code>. You need to help <code>gdbgui</code> out by typing <code>main</code> into the file browser box:</p> <p></p> <p>and selecting the <code>main.rs</code> file. The source code should then appear in the browser and you can click to set breakpoints and run the program. Of course, if you want to break in some other file, you can find that in the file browser instead.</p>"},{"location":"guides/#rust-on-macos","title":"Rust on macOS","text":"<p>When you load your rust binary on a mac, you may see many warnings like this</p> <p>warning /Users/user/examples/rust/target/debug/deps/hello-486956f9dde465e5.9elsx31vb4it187.rcgu.o': can't open to read symbols: No such file or directory.</p> <p>Symbols are names of variables, functions and types defined in your program. You can define symbols for your program by loading symbol files. gdb usually does this automatically for you, but sometimes has trouble finding the right paths.</p> <p>In this case, you need to manually tell gdb where the symbol files is; it's usually the first part of the missing file. In the above example, it's <code>hello-486956f9dde465e5.9elsx31vb4it187.rcgu.o</code>.</p> <p>You can load this into gdb with the following command (changed as appropriate):</p> <pre><code>symbol-file /Users/user/git/gdbgui/examples/rust/target/debug/deps/hello-486956f9dde465e5\n</code></pre> <p>2.) The GDB pretty-printing macros that Rust ships with. GDB can't find these by default, which makes it print the message</p> <pre><code>warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts of file /home/temp/myprog/target/debug/myprog.\nUse `info auto-load python-scripts [REGEXP]' to list them.\n</code></pre> <p>You can safely ignore this, but the Rust issue describes the workarounds necessary (create a <code>.gdbinit</code> file and paste a few lines into the Python helper script).</p> <ul> <li>On Windows Rust defaults to the MSVC toolchain, and <code>gdbgui</code> can't debug binaries compiled that way. If you want to use <code>gdbgui</code>, you'll have to switch to the GNU toolchain.</li> <li>If you want to debug programs compiled in Release mode, you will need to create a <code>profile.release</code> section in your   <code>Cargo.toml</code> and add <code>debug = true</code> to it. See the Cargo manifest for details.</li> </ul> <p>and now gdb will be able to see which files were used to compile your binary, among other things.</p>"},{"location":"guides/#connecting-to-gdbserver","title":"Connecting to gdbserver","text":"<p>Like gdb, <code>gdbserver</code> is also made by gnu, but with the following important differences:</p> <ul> <li>it is much smaller than gdb</li> <li>it is easier to port to other architectures than all of gdb</li> </ul> <p>gdbserver runs on a remote machine or embedded target, which, as the name suggests, runs a server. gdb communicates with gdbserver so you can debug on your local machine. To do this, the remote machine must run the server and program:</p> <p><code>gdbserver :9000 mybinary.a</code></p> <p>Then you can launch <code>gdb</code> or <code>gdbgui</code> and connect to it. In <code>gdbgui</code>, use the dropdown to select <code>Connect to gdbserver</code>, and enter</p> <p><code>&lt;remote ip address&gt;:9000</code></p> <p>Read more at the gdbserver homepage.</p> <p>If the machine gdbgui is running on and the target being debugged have different architectures, make sure gdb is built properly (see <code>Remote Debugging Between Different Architectures</code>).</p>"},{"location":"guides/#remote-debugging-between-different-architectures","title":"Remote Debugging Between Different Architectures","text":"<p>For example, this is useful if you are working from an x86_64 based PC gdb client with gdbgui, to ARM arch gdbserver.</p> <p>You need to build the <code>gdb</code> client with the <code>--host</code> and <code>--target</code> flags. You need to build the <code>gdbserver</code> for the correct architecture.</p> <p>Build the <code>gdb</code> client that <code>gdbgui</code> will use. This example applies to an x86_64 pc running gdbgui that connects to an arm device running gdbserver, so you will need to ensure the targets apply to the environments you are working in:</p> <ol> <li>downloaded latest gdb source code</li> <li>unzip it, go into folder 3.</li> </ol> <pre><code>./configure  --host=x86_64-pc-linux-gnu --build=x86_64-pc-linux-gnu --target=arm-linux-gnuabi &amp;&amp;\nmake -j8 &amp;&amp;\nsudo make install\n</code></pre> <ol> <li>Now arm-linux-gnuabi-gdb is installed by default to <code>/usr/local/bin</code>, but you can instead provide <code>prefix=&lt;path&gt;</code> to where you want it to install in the ./configure script above</li> <li>The <code>arm-linux-gnuabi-gdb</code> binary can now be used by gdbgui to connect to the ARM device:</li> </ol> <pre><code>gdbgui -g arm-linux-gnuabi-gdb\n</code></pre> <p>Links: * Building GDB and GDBserver for cross debugging * http://www.brain-dump.org/blog/entry/138/Cross_Arch_Remote_Debugging_with_gdb_and_gdbserver * support remote debug from x86_64 based PC gdb client with gdbgui, to ARM arch gdbserver (multiarch)</p>"},{"location":"howitworks/","title":"How it Works","text":"<p>gdbgui consists of two main parts: the frontend and the backend</p>"},{"location":"howitworks/#backend","title":"Backend","text":"<p>The backend is written in Python and consists of a Flask server with websocket capability thanks to the <code>python-socketio</code> package.</p> <p>When a new websocket connection from a browser is established, the server starts a new gdb subprocess and associates it with this websocket. This gdb process is told to use gdb's machine interface interpreter, which enables gdb's input and output to be programatically parsed so you can write code to do further processing with it, such as build a user interface.</p> <p>The pygdbmi library is used to manage the gdb subprocess and parse its output. It returns key/value pairs (dictionaries) that can be used to create a frontend. I wrote pygdbmi as a building block for gdbgui, but it is useful for any type of programmatic control over gdb.</p> <p>In summary, the backend is used to:</p> <ul> <li>create endpoints for the browser, including http and websocket.</li> <li>The server can access the operating system and do things like read source files or send signals to processes.</li> <li>create a managed gdb subprocess and parse output with pygdbmi</li> <li>spawn a separate thread to constantly check for output from the gdb subprocess</li> <li>forward output to the client through a websocket as it is parsed in the reader thread</li> </ul>"},{"location":"howitworks/#frontend","title":"Frontend","text":"<p>The frontend is written in JavaScript and uses React. It establishes a websocket connection to the server, at which time the server starts a new gdb subprocess for that particular websocket connection as mentioned above. Commands can be sent from the browser through the websocket to the server which writes to gdb, and output from gdb is forwarded from the server through the websocket to the browser.</p> <p>As the browser receives websocket messages from the server, it maintains the state of gdb, such as whether it's running, paused, or exited, where breakpoints are, what the stack is, etc. As this state changes, React performs the necessary DOM updates.</p> <p>In summary, the frontend is used to:</p> <ul> <li>Convert key/value pairs of gdb's machine interface output into a user interface</li> <li>Maintain the state of gdb</li> <li>Provide UI elements that can send gdb machine interface commands to gdb</li> </ul>"},{"location":"installation/","title":"gdbgui installation","text":"<p>There are a few ways to install gdbgui on your machine. There is even a way to run gdbgui without installing it. Read on to to find the one that's right for you.</p>"},{"location":"installation/#method-1-using-pipx-recommended","title":"Method 1: Using <code>pipx</code> (recommended)","text":"<p>gdbgui recommends using pipx, a program to run Python CLI binaries in isolated environments.</p> <p>You can install pipx like this:</p> <pre><code>python3 -m pip install --user pipx\npython3 -m userpath append ~/.local/bin\n</code></pre> <p>Restart/re-source your console to make sure the userpath is up to date.</p> <p>Then, install gdbgui with pipx:</p> <pre><code>pipx install gdbgui\n</code></pre> <p>To upgrade run</p> <pre><code>pipx upgrade gdbgui\n</code></pre> <p>When installation is finished, type <code>gdbgui</code> from the command line to run it, or <code>gdbgui -h</code> for help.</p> <p>To uninstall, run</p> <pre><code>pipx uninstall gdbgui\n</code></pre>"},{"location":"installation/#try-without-installing","title":"Try Without Installing","text":"<p>By using pipx, you can run Python CLI programs in ephemeral one-time virtual environments.</p> <pre><code>pipx run gdbgui\n</code></pre> <p>A new tab running the latest version of gdbgui will open in your browser. Press CTRL+C to end the process, and your system will remain untouched.</p>"},{"location":"installation/#method-2-using-pip","title":"Method 2: Using <code>pip</code>","text":"<p><code>pip</code> is a popular installer for Python packages. gdbgui is a Python package and as such can be installed with pip, though we recommend using <code>pipx</code> rather than <code>pip</code> if possible.</p> <p>If you prefer to use Virtual Environments, you can activate one and then run</p> <pre><code>pip install gdbgui\n</code></pre> <p>You can get upgrades with</p> <pre><code>pip install --upgrade gdbgui\n</code></pre> <p>To uninstall, run</p> <pre><code>pip uninstall gdbgui\n</code></pre>"},{"location":"installation/#method-3-download-and-run-binary-executable","title":"Method 3: Download and Run Binary Executable","text":"<p>Download and run the binary executable for your system from GitHub Releases.</p>"},{"location":"installation/#system-dependencies-for-python-package","title":"System Dependencies for Python Package","text":"<p>Note that this only applies if you are installing the Python package, and not using the binary executable.</p> <ul> <li>gdb (gnu debugger)</li> <li>Python 3.4+ (recommended) or 2.7</li> <li>pip version 8 or higher</li> </ul>"},{"location":"installation/#linux-dependencies","title":"Linux Dependencies","text":"<pre><code>sudo apt install gdb python3\n</code></pre>"},{"location":"installation/#macos-dependencies","title":"macOS Dependencies","text":"<pre><code>brew install python3\nbrew install gdb --with-python --with-all-targets\n</code></pre> <p>macOS users must also codesign gdb: follow these instructions. This will fix the error <code>please check gdb is codesigned - see taskgated(8)</code>.</p>"},{"location":"installation/#windows-dependencies","title":"Windows Dependencies","text":"<p>Note that windows is only supported for gdbgui versions less than 0.14.</p> <ul> <li>Python 3</li> <li>gdb, make, gcc</li> </ul> <p>If you do not have already have gdb/make/gcc installed, there are two options to install them on Windows: <code>MinGW</code> and <code>cygwin</code>.</p>"},{"location":"installation/#mingw-recommended","title":"MinGW (recommended)","text":"<p>Minimal GNU for Windows (<code>MinGW</code>) is the recommended Windows option. Install MinGW with the \"MinGW Base System\" package. This is the default package which contains <code>make</code>, <code>gcc</code>, and <code>gdb</code>.</p> <p>It will install to somewhere like <code>C:\\MinGW\\bin\\...</code>. For example <code>C:\\MinGW\\bin\\gdb.exe</code>, <code>C:\\MinGW\\bin\\mingw32-make.exe</code>, etc.</p> <p>Ensure this MinGW binary directory (i.e. <code>C:\\MinGW\\bin\\</code>) is on your \"Path\" environment variable: Go to <code>Control Panel &gt; System Properties &gt; Environment Variables &gt; System Variables &gt; Path</code> and make sure <code>C:\\MinGW\\bin\\</code> is added to that list. If it is not added to your \"Path\", you will have to run gdbgui with the path explicitly called out, such as <code>gdbgui -g C:\\MinGW\\bin\\gdb.exe</code>.</p>"},{"location":"installation/#cygwin","title":"Cygwin","text":"<p>Cygwin is a more UNIX-like compatibility layer on Windows, and <code>gdbgui</code> works with it as well.</p> <ul> <li>Install cygwin</li> </ul> <p>When installing cygwin packages, add the following:</p> <ul> <li>python3</li> <li>python3-pip</li> <li>python3-devel</li> <li>gdb</li> <li>gcc-core</li> <li>gcc-g++</li> </ul>"},{"location":"installation/#running-from-source","title":"Running from Source","text":"<p>See the contributing section.</p>"},{"location":"screenshots/","title":"Screenshot Tour","text":"<p>Enter the binary and args just as you'd call them on the command line. The binary is restored when gdbgui is opened at a later time.</p> <p></p> <p>Intuitive control of your program. From left to right: Run, Continue, Next, Step, Return, Next Instruction, Step Instruction.</p> <p></p> <p>If the environment supports reverse debugging, such as when using an Intel CPU and running Linux and debugging with rr, gdbgui allows you to debug in reverse. </p>"},{"location":"screenshots/#stackthreads","title":"Stack/Threads","text":"<p>View all threads, the full stack on the active thread, the current frame on inactive threads. Switch between frames on the stack, or threads by pointing and clicking.</p> <p></p>"},{"location":"screenshots/#send-signal-to-inferior-debugged-process","title":"Send Signal to Inferior (debugged) Process","text":"<p>Choose from any signal your OS supports to send to the inferior. For example, to mock <code>CTRL+C</code> in plain gdb, you can send <code>SIGINT</code> to interrupt the inferior process. If the inferior process is hung for some reason, you can send <code>SIGKILL</code>, etc. </p>"},{"location":"screenshots/#source-code","title":"Source Code","text":"<p>View source, assembly, add breakpoints. All symbols used to compile the target are listed in a dropdown above the source code viewer, and have autocompletion capabilities. There are two different color schemes: dark (monokai), and a light theme (default).</p> <p></p> <p>With assembly. Note the bold line is the current instruction that gdb is stopped on.</p> <p></p> <p>If the source file is not found, it will display assembly, and allow you to step through it as desired. </p>"},{"location":"screenshots/#variables-and-expressions","title":"Variables and Expressions","text":"<p>All local variables are automatically displayed, and are clickable to explore their fields.</p> <p></p> <p>Hover over a variable and explore it, just like in the Chrome debugger.</p> <p></p> <p>Arbitrary expressions can be evaluated as well. These expressions persist as the program is stepped through. The base/radix can be modified as desired.</p> <p></p> <p></p> <p>Expressions record their previous values, and can be displayed in an x/y plot.</p> <p></p> <p>Expressions can be interactively explored in a tree view.</p> <p></p>"},{"location":"screenshots/#memory-viewer","title":"Memory Viewer","text":"<p>All hex addresses are automatically converted to clickable links to explore memory. Length of memory is configurable. In this case 10 bytes are displayed per row.</p> <p></p>"},{"location":"screenshots/#registers","title":"Registers","text":"<p>View all registers. If a register was updated it is highlighted in yellow.</p> <p></p>"},{"location":"screenshots/#gdb-console","title":"gdb console","text":"<ul> <li>Prints gdb output</li> <li>Allows you to write directly to the underlying gdb subprocess as if you were using it in the terminal</li> <li>Tab completion works, and displays a button to view help on gdb commands</li> <li>Can be used to ease into learning gdb</li> <li>Can be used as a fallback for commands that don't have a UI widget</li> <li>History can be accessed using up/down arrows</li> </ul>"},{"location":"screenshots/#authentication","title":"authentication","text":"<p>Authentication can be enabled when serving on a publicly accessible IP address. See <code>gdbgui --help</code> for instructions on how to enable authentication.</p> <p></p>"},{"location":"screenshots/#dashboard","title":"Dashboard","text":"<p>A dashboard is available to let you look at all gdb instances managed by gdbgui. You can kill them, or attach to them. More than one person can attach to a managed gdb subprocess and participate in the debugging session simultaneously. i.e. if one person steps forward, all connected users see the program step forward in real time.</p> <p></p>"},{"location":"screenshots/#gdbgui-at-launch","title":"gdbgui at launch","text":""}]}