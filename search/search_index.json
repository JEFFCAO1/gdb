{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A browser-based frontend to gdb (gnu debugger) gdbgui is a browser-based frontend to gdb , the gnu debugger . You can add breakpoints, view stack traces, and more in C, C++, Go, and Rust! It's perfect for beginners and experts. Simply run gdbgui from the terminal to start the gdbgui server, and a new tab will open in your browser. Sound Good? Get started with installation . Testimonials \" Definitely worth checking out. \" \u2014 Jason Turner , host of C++ weekly on YouTube \" Seriously, great front-end to gdb for those of us who are not always using a full IDE. Great project. \" \u2014Jefferson on Twitter \" Where were you all my life? And why did I use DDD? \" \u2014 Mario Zechner , author, game engine developer on Twitter gdbgui is used by thousands of developers around the world including engineers at Google and college computer science course instructions. It even made its way into the Rust programming language's source code and appeared on episode 110 of C++ Weekly . License gdbgui's license is GNU GPLv3. To summarize it, you can use it for free at work or for personal use can modify its source code must disclose your source code if you redistribute any part of gdbgui Distribution gdbgui is distributed through github ( https://github.com/cs01/gdbgui ) PyPI Authors Chad Smith, creator/maintainer @bobthekingofegypt, contibutor Community contributions Donate Paypal Contact https://chadsmith.dev chadsmith.software@gmail.com","title":"Home"},{"location":"#testimonials","text":"\" Definitely worth checking out. \" \u2014 Jason Turner , host of C++ weekly on YouTube \" Seriously, great front-end to gdb for those of us who are not always using a full IDE. Great project. \" \u2014Jefferson on Twitter \" Where were you all my life? And why did I use DDD? \" \u2014 Mario Zechner , author, game engine developer on Twitter gdbgui is used by thousands of developers around the world including engineers at Google and college computer science course instructions. It even made its way into the Rust programming language's source code and appeared on episode 110 of C++ Weekly .","title":"Testimonials"},{"location":"#license","text":"gdbgui's license is GNU GPLv3. To summarize it, you can use it for free at work or for personal use can modify its source code must disclose your source code if you redistribute any part of gdbgui","title":"License"},{"location":"#distribution","text":"gdbgui is distributed through github ( https://github.com/cs01/gdbgui ) PyPI","title":"Distribution"},{"location":"#authors","text":"Chad Smith, creator/maintainer @bobthekingofegypt, contibutor Community contributions","title":"Authors"},{"location":"#donate","text":"Paypal","title":"Donate"},{"location":"#contact","text":"https://chadsmith.dev chadsmith.software@gmail.com","title":"Contact"},{"location":"api/","text":"This is the command line help output of gdbgui. usage: gdbgui [-h] [-g GDB] [--gdb-args GDB_ARGS] [--rr] [-p PORT] [--host HOST] [-r] [--auth-file AUTH_FILE] [--user USER] [--password PASSWORD] [--key KEY] [--cert CERT] [--remap-sources REMAP_SOURCES] [--project PROJECT] [-v] [-n] [-b BROWSER] [--debug] [--args ...] [cmd] A server that provides a graphical user interface to the gnu debugger (gdb). https://github.com/cs01/gdbgui positional arguments: cmd The executable file and any arguments to pass to it. To pass flags to the binary, wrap in quotes, or use --args instead. Example: gdbgui ./mybinary [other- gdbgui-args...] Example: gdbgui './mybinary myarg -flag1 -flag2' [other gdbgui args...] optional arguments: -h, --help show this help message and exit --args ... Specify the executable file and any arguments to pass to it. All arguments are taken literally, so if used, this must be the last argument passed to gdbgui. Example: gdbgui [...] --args ./mybinary myarg -flag1 -flag2 gdb settings: -g GDB, --gdb GDB Path to debugger. Default: gdb --gdb-args GDB_ARGS Arguments passed directly to gdb when gdb is invoked. For example,--gdb-args=\"--nx --tty=/dev/ttys002\" --rr Use `rr replay` instead of gdb. Replays last recording by default. Replay arbitrary recording by passing recorded directory as an argument. i.e. gdbgui /recorded/dir --rr. See http://rr-project.org/. gdbgui network settings: -p PORT, --port PORT The port on which gdbgui will be hosted. Default: 5000 --host HOST The host ip address on which gdbgui serve. Default: 127.0.0.1 -r, --remote Shortcut to set host to 0.0.0.0 and suppress browser from opening. This allows remote access to gdbgui and is useful when running on a remote machine that you want to view/debug from your local browser, or let someone else debug your application remotely. security settings: --auth-file AUTH_FILE Require authentication before accessing gdbgui in the browser. Specify a file that contains the HTTP Basic auth username and password separate by newline. --user USER Username when authenticating --password PASSWORD Password when authenticating --key KEY SSL private key. Generate with:openssl req -newkey rsa:2048 -nodes -keyout host.key -x509 -days 365 -out host.cert --cert CERT SSL certificate. Generate with:openssl req -newkey rsa:2048 -nodes -keyout host.key -x509 -days 365 -out host.cert other settings: --remap-sources REMAP_SOURCES, -m REMAP_SOURCES Replace compile-time source paths to local source paths. Pass valid JSON key/value pairs.i.e. --remap- sources='{\"/buildmachine\": \"/home/chad\"}' --project PROJECT Set the project directory. When viewing the \"folders\" pane, paths are shown relative to this directory. -v, --version Print version -n, --no-browser By default, the browser will open with gdbgui. Pass this flag so the browser does not open. -b BROWSER, --browser BROWSER Use the given browser executable instead of the system default. --debug The debug flag of this Flask application. Pass this flag when debugging gdbgui itself to automatically reload the server when changes are detected","title":"API"},{"location":"changelog/","text":"gdbgui release history 0.15.0.0 This release is focused mostly on Python 3.9 compatibility and updating dependencies Support only Python 3.9 (though other Python versions may still work) Build gdbgui as a pex executable. These are executable Python environments that are self-contained with the exception of requiring a specific Python version installed in the environment running the executable. The pex executables should have better compatibility than PyInstaller executables, which sometimes have missing shared libraries depending on the operating system. Use only the threading async model for flask-socketio. No longer support gevent or eventlet. [bugfix] Catch exception if gdb used in tty window crashes instead of gdbgui crashing along with it Disable pagination in gdb tty by default. It can be turned back on with set pagination off . Upgrade various dependencies for both the backend and frontend (Python and JavaScript) Display gdbgui version in \"about\" and \"session information\" 0.14.0.2 Pinned python-socketio version Pinned mypy version to unbreak linting Fixed reverse debugging commands that were broken when --gdb flag was removed 0.14.0.1 Fix import paths Pin broken dependency to avoid segfault Hide \"No registers.\" message 0.14.0.0 Breaking Changes Removed support for Windows Replaced --gdb flag with --gdb-cmd . The --gdb-cmd argument specifies the gdb executable as well as all arguments you wish to pass to gdb at startup, for example --gdb-cmd \"gdb -nx\" . The existing -g argument is an alias for --gdb-cmd . Removed --rr flag. Use --gdb-cmd \"rr replay --\" instead. Removed deprecated and hidden --hide-gdbgui-upgrades argument. It will now raise an error. Additional Changes Replaced single terminal on frontend with three terminals: an interactive xterm terminal running gdb, a gdbgui console for diagnostic messages, and a terminal connected to the inferior application being debugged. Updates to the dashboard Add ability to specify gdb command from the browser. This can now be accomplished from the dashboard. Removed gdbgui binaries from source control. They can now be downloaded as artifacts of releases . [documentation] Fix bug when generating md5 checksum for binary releases Remove \"shutdown\" button in UI 0.13.2.1 No end user changes. This release builds the gdbgui executables with GitHub actions. 0.13.2.0 Print number of times a breakpoint was hit (@MatthiasKreileder). Publish sdist to PyPI (this was overlooked in previous release). Do not notify users of gdbgui upgrades (deprecate --hide-gdbgui-upgrades flag) Drop support for Python 3.4 [dev] Some infrastructure changes to gdbgui. End users should not be affected. [dev] Fix build error due to webpack bug (https://github.com/webpack/webpack/issues/8082). 0.13.1.2 Exclude \"tests\" directory from Python package Remove analytics from documentation 0.13.1.1 Add __main__ entrypoint 0.13.1.0 Remove automatic flushing of stdout and require newer version of pygdbmi Add flake8 tests to CI build 0.13.0.0 Add ability to re-map source file paths. Added flags --remap-sources and -m to replace compile-time source paths to local source paths. i.e. gdbgui --remap-sources='{\"/buildmachine\": \"/home/chad\"}' (#158) Add shift keyboard shortcut to go in reverse when using rr (#201) Pass arbitrary gdb arguments directly to gdb: added --gdb-args flag Removed -x CLI option, which caused major version to change. New way to pass is gdbgui --gdb-args='-x=FILE' (#205) Add \"name\" to Threads (new gdb 8.1 feature) (@P4Cu) Fix crash/black screen from \"Python Exception name long is not defined\" #212 Fix bug when debugging filenames with spaces (Fix Cannot create breakpoint: -break-insert: Garbage following #211\") Fix empty frame causes the ui to crash/black screen #216 Update npm packages; update react to 16.4 Update prettier rules Update tour text + fix typo in tour (@nkirkby) 0.12.0.0 Add pause button Update command line parsing for cmd and --args, change arguments from underscore to hyphen, add option to specify browser (@fritzr) Add tour Run set breakpoint pending on on initial connection Allow signal to be sent to arbitrary PIDs Fix bug when sending signals in Python2 Move signal component lower in side pane Update Rust documentation Make requirements.txt point to setup.py's dependencies 0.11.3.1 Limit maximum Flask version to prevent Session expired. Please refresh this webpage. error Rename \"premium\" to \"ad-free\" Do smarter version checking Fix bug when trying to view \"about\" 0.11.3.0 ensure expressions with hex values are parsed and updated appropriately (#182) improve command line arguments use python logging module 0.11.2.1 Small bugfix for specific platforms when reading version number 0.11.2.0 add option to remove fflush command (#179) remove react-treebeard and render filesystem w/ new component 0.11.1.1 Bugfix displaying upgrade text 0.11.1.0 Add csrf and cross origin protection Convert backslashes to forward slashes when entering windows binary paths (#167) Fix safari ui issue (#164) Update text on reload file button, and disable when no file is loaded (#165) When disassembly can't be fetched in mode 4, fetch in mode 3 and assume gdb version is 7.6.0 (#166) Add copy to clipboard icon for files and variables Allow SSL module import to fail and print warning (#170) Cleanup menu, add license info, bugfixes, etc. (#169, #136, #163, #172) 0.11.0.0 Replace --auth cli option with --user and --password 0.10.3.0 Added resizer buttons to components on right pane 0.10.2.1 Add link for fix for macOS users Update version of React to 16.2 Remove unused links 0.10.2.0 Add folders view, rearrange layout (@martin-der) Add settings cog button Add message when sending signal to inferior process (#156) Change default theme to monokai, rename 'default' theme to 'light' Minor bugfixes 0.10.1.0 Display descriptions of registers Do not try to fetch Registers when they cannot be read 0.10.0.2 Add support for rr (--rr flag) Add dashboard to connect to/kill existing gdb processes Add option to specify SSL key and certificate to enable https Add option to connect to process Add option to connect to gdbserver Add infinite scrolling 0.9.4.1 Remove pypugjs dependency 0.9.4.0 Add native Windows support (no longer relies on Cygwin) 0.9.3.0 Only display assembly flavor is assembly is displayed Add new output type to console (gdbgui output) Add dashboard link and dropdown for gdb server/pid attach Handle invalid signal choice better Print gdb mi log messages to console Remove localStorage keys when they are invalid 0.9.2.0 Add signals component and allow signals to be sent to gdb (issue ##141) Fix bug when jumping to line of source file 0.9.1.1 Fix bug when passing arguments to gdb Require latest version of pygdbmi for faster parsing of large gdb output 0.9.1.0 Lazily load files (issue #131) Update setup.py to build wheels 0.9.0.1 Reupload to fix setup.cfg PyPI bug 0.9.0.0 Compress responses from server (massive bandwidth improvement) Add button to toggle assembly flavors (issue #110) Parse executable+args with spaces (issue #116) Turn modals into components Move everything into a single root React component Refresh state when clicking \"return\" button Add javascript unit tests 0.8.2.0 Add optional authentication (@nickamon, issue #132) Support the --args flag (issue #126) Ensure code is correct and adheres to recommended Python style when running tests/building (flake8) Display source when running backtrace (fix regression, #134) 0.8.1.0 Add autocomplete functionality (@bobthekingofegypt, issue #129) Rearranged and improved alignment of assembly Fixed bug when fetching variable fails Plot floating point values instead of casting to int 0.8.0.3 modify component initialization order so that store updates are better sequenced 0.8.0.2 display bracket instead of &lt; when exploring gdb variables 0.8.0.1 fix bug when restoring old settings 0.8.0.0 Add ability to change radix of variables (issue #102) Add component to send signals to inferior program (issues #31, #90) Parse gdb version from arm-non-eabi-gdb (issue #83) Rewrite most components to React (issue #17) Improve CSS in various components 0.7.9.5 re-fetch registers if name/value count does not match 0.7.9.4 add inputs to resize Tree view add menu in top right css updates to preserve whitespace in terminal add top-level html to wrap body+head elements in gdbgui.pug add help file add donate page 0.7.9.3 Changes to layout Fix character escaping in breakpoint line display 0.7.9.2 Fix firefox css bug Update examples Update readme for windows (cygwin) users (thanks tgharib) 0.7.9.1 Collapse simple fields to the parent node in tree explorer Add button to re-enter program state when signals are received (i.e. SEGFAULT) 0.7.9.0 Add interactive tree explorer of variables 0.7.8.3 Remove optimization for fetching registers due to potential bug 0.7.8.2 bugfix in logic when jumping to source code line bugfix for when variable goes from empty -> 1 element add CODE OF CONDUCT, CONTRIBUTING, and CHANGELOG files 0.7.8.1 correctly display < and > in console widget 0.7.8.0 show disassembly when file is unknown or missing show new children in expressions widget when they are dynamically added by application (@wuyihao) suppress nuisance errors when hover variable or fflush command is not found improve logic when source code line should be jumped to escape brackets in disassembly, and gracefully hide missing opcodes update socketio version for more reliable websocket connection 0.7.7.0 Show variable values when hovering in source code gracefully handle hostname not being present in /etc/hosts when running with remote flag Use external state management library ( stator.js ) for client ui","title":"Changelog"},{"location":"changelog/#gdbgui-release-history","text":"","title":"gdbgui release history"},{"location":"changelog/#01500","text":"This release is focused mostly on Python 3.9 compatibility and updating dependencies Support only Python 3.9 (though other Python versions may still work) Build gdbgui as a pex executable. These are executable Python environments that are self-contained with the exception of requiring a specific Python version installed in the environment running the executable. The pex executables should have better compatibility than PyInstaller executables, which sometimes have missing shared libraries depending on the operating system. Use only the threading async model for flask-socketio. No longer support gevent or eventlet. [bugfix] Catch exception if gdb used in tty window crashes instead of gdbgui crashing along with it Disable pagination in gdb tty by default. It can be turned back on with set pagination off . Upgrade various dependencies for both the backend and frontend (Python and JavaScript) Display gdbgui version in \"about\" and \"session information\"","title":"0.15.0.0"},{"location":"changelog/#01402","text":"Pinned python-socketio version Pinned mypy version to unbreak linting Fixed reverse debugging commands that were broken when --gdb flag was removed","title":"0.14.0.2"},{"location":"changelog/#01401","text":"Fix import paths Pin broken dependency to avoid segfault Hide \"No registers.\" message","title":"0.14.0.1"},{"location":"changelog/#01400","text":"Breaking Changes Removed support for Windows Replaced --gdb flag with --gdb-cmd . The --gdb-cmd argument specifies the gdb executable as well as all arguments you wish to pass to gdb at startup, for example --gdb-cmd \"gdb -nx\" . The existing -g argument is an alias for --gdb-cmd . Removed --rr flag. Use --gdb-cmd \"rr replay --\" instead. Removed deprecated and hidden --hide-gdbgui-upgrades argument. It will now raise an error. Additional Changes Replaced single terminal on frontend with three terminals: an interactive xterm terminal running gdb, a gdbgui console for diagnostic messages, and a terminal connected to the inferior application being debugged. Updates to the dashboard Add ability to specify gdb command from the browser. This can now be accomplished from the dashboard. Removed gdbgui binaries from source control. They can now be downloaded as artifacts of releases . [documentation] Fix bug when generating md5 checksum for binary releases Remove \"shutdown\" button in UI","title":"0.14.0.0"},{"location":"changelog/#01321","text":"No end user changes. This release builds the gdbgui executables with GitHub actions.","title":"0.13.2.1"},{"location":"changelog/#01320","text":"Print number of times a breakpoint was hit (@MatthiasKreileder). Publish sdist to PyPI (this was overlooked in previous release). Do not notify users of gdbgui upgrades (deprecate --hide-gdbgui-upgrades flag) Drop support for Python 3.4 [dev] Some infrastructure changes to gdbgui. End users should not be affected. [dev] Fix build error due to webpack bug (https://github.com/webpack/webpack/issues/8082).","title":"0.13.2.0"},{"location":"changelog/#01312","text":"Exclude \"tests\" directory from Python package Remove analytics from documentation","title":"0.13.1.2"},{"location":"changelog/#01311","text":"Add __main__ entrypoint","title":"0.13.1.1"},{"location":"changelog/#01310","text":"Remove automatic flushing of stdout and require newer version of pygdbmi Add flake8 tests to CI build","title":"0.13.1.0"},{"location":"changelog/#01300","text":"Add ability to re-map source file paths. Added flags --remap-sources and -m to replace compile-time source paths to local source paths. i.e. gdbgui --remap-sources='{\"/buildmachine\": \"/home/chad\"}' (#158) Add shift keyboard shortcut to go in reverse when using rr (#201) Pass arbitrary gdb arguments directly to gdb: added --gdb-args flag Removed -x CLI option, which caused major version to change. New way to pass is gdbgui --gdb-args='-x=FILE' (#205) Add \"name\" to Threads (new gdb 8.1 feature) (@P4Cu) Fix crash/black screen from \"Python Exception name long is not defined\" #212 Fix bug when debugging filenames with spaces (Fix Cannot create breakpoint: -break-insert: Garbage following #211\") Fix empty frame causes the ui to crash/black screen #216 Update npm packages; update react to 16.4 Update prettier rules Update tour text + fix typo in tour (@nkirkby)","title":"0.13.0.0"},{"location":"changelog/#01200","text":"Add pause button Update command line parsing for cmd and --args, change arguments from underscore to hyphen, add option to specify browser (@fritzr) Add tour Run set breakpoint pending on on initial connection Allow signal to be sent to arbitrary PIDs Fix bug when sending signals in Python2 Move signal component lower in side pane Update Rust documentation Make requirements.txt point to setup.py's dependencies","title":"0.12.0.0"},{"location":"changelog/#01131","text":"Limit maximum Flask version to prevent Session expired. Please refresh this webpage. error Rename \"premium\" to \"ad-free\" Do smarter version checking Fix bug when trying to view \"about\"","title":"0.11.3.1"},{"location":"changelog/#01130","text":"ensure expressions with hex values are parsed and updated appropriately (#182) improve command line arguments use python logging module","title":"0.11.3.0"},{"location":"changelog/#01121","text":"Small bugfix for specific platforms when reading version number","title":"0.11.2.1"},{"location":"changelog/#01120","text":"add option to remove fflush command (#179) remove react-treebeard and render filesystem w/ new component","title":"0.11.2.0"},{"location":"changelog/#01111","text":"Bugfix displaying upgrade text","title":"0.11.1.1"},{"location":"changelog/#01110","text":"Add csrf and cross origin protection Convert backslashes to forward slashes when entering windows binary paths (#167) Fix safari ui issue (#164) Update text on reload file button, and disable when no file is loaded (#165) When disassembly can't be fetched in mode 4, fetch in mode 3 and assume gdb version is 7.6.0 (#166) Add copy to clipboard icon for files and variables Allow SSL module import to fail and print warning (#170) Cleanup menu, add license info, bugfixes, etc. (#169, #136, #163, #172)","title":"0.11.1.0"},{"location":"changelog/#01100","text":"Replace --auth cli option with --user and --password","title":"0.11.0.0"},{"location":"changelog/#01030","text":"Added resizer buttons to components on right pane","title":"0.10.3.0"},{"location":"changelog/#01021","text":"Add link for fix for macOS users Update version of React to 16.2 Remove unused links","title":"0.10.2.1"},{"location":"changelog/#01020","text":"Add folders view, rearrange layout (@martin-der) Add settings cog button Add message when sending signal to inferior process (#156) Change default theme to monokai, rename 'default' theme to 'light' Minor bugfixes","title":"0.10.2.0"},{"location":"changelog/#01010","text":"Display descriptions of registers Do not try to fetch Registers when they cannot be read","title":"0.10.1.0"},{"location":"changelog/#01002","text":"Add support for rr (--rr flag) Add dashboard to connect to/kill existing gdb processes Add option to specify SSL key and certificate to enable https Add option to connect to process Add option to connect to gdbserver Add infinite scrolling","title":"0.10.0.2"},{"location":"changelog/#0941","text":"Remove pypugjs dependency","title":"0.9.4.1"},{"location":"changelog/#0940","text":"Add native Windows support (no longer relies on Cygwin)","title":"0.9.4.0"},{"location":"changelog/#0930","text":"Only display assembly flavor is assembly is displayed Add new output type to console (gdbgui output) Add dashboard link and dropdown for gdb server/pid attach Handle invalid signal choice better Print gdb mi log messages to console Remove localStorage keys when they are invalid","title":"0.9.3.0"},{"location":"changelog/#0920","text":"Add signals component and allow signals to be sent to gdb (issue ##141) Fix bug when jumping to line of source file","title":"0.9.2.0"},{"location":"changelog/#0911","text":"Fix bug when passing arguments to gdb Require latest version of pygdbmi for faster parsing of large gdb output","title":"0.9.1.1"},{"location":"changelog/#0910","text":"Lazily load files (issue #131) Update setup.py to build wheels","title":"0.9.1.0"},{"location":"changelog/#0901","text":"Reupload to fix setup.cfg PyPI bug","title":"0.9.0.1"},{"location":"changelog/#0900","text":"Compress responses from server (massive bandwidth improvement) Add button to toggle assembly flavors (issue #110) Parse executable+args with spaces (issue #116) Turn modals into components Move everything into a single root React component Refresh state when clicking \"return\" button Add javascript unit tests","title":"0.9.0.0"},{"location":"changelog/#0820","text":"Add optional authentication (@nickamon, issue #132) Support the --args flag (issue #126) Ensure code is correct and adheres to recommended Python style when running tests/building (flake8) Display source when running backtrace (fix regression, #134)","title":"0.8.2.0"},{"location":"changelog/#0810","text":"Add autocomplete functionality (@bobthekingofegypt, issue #129) Rearranged and improved alignment of assembly Fixed bug when fetching variable fails Plot floating point values instead of casting to int","title":"0.8.1.0"},{"location":"changelog/#0803","text":"modify component initialization order so that store updates are better sequenced","title":"0.8.0.3"},{"location":"changelog/#0802","text":"display bracket instead of &lt; when exploring gdb variables","title":"0.8.0.2"},{"location":"changelog/#0801","text":"fix bug when restoring old settings","title":"0.8.0.1"},{"location":"changelog/#0800","text":"Add ability to change radix of variables (issue #102) Add component to send signals to inferior program (issues #31, #90) Parse gdb version from arm-non-eabi-gdb (issue #83) Rewrite most components to React (issue #17) Improve CSS in various components","title":"0.8.0.0"},{"location":"changelog/#0795","text":"re-fetch registers if name/value count does not match","title":"0.7.9.5"},{"location":"changelog/#0794","text":"add inputs to resize Tree view add menu in top right css updates to preserve whitespace in terminal add top-level html to wrap body+head elements in gdbgui.pug add help file add donate page","title":"0.7.9.4"},{"location":"changelog/#0793","text":"Changes to layout Fix character escaping in breakpoint line display","title":"0.7.9.3"},{"location":"changelog/#0792","text":"Fix firefox css bug Update examples Update readme for windows (cygwin) users (thanks tgharib)","title":"0.7.9.2"},{"location":"changelog/#0791","text":"Collapse simple fields to the parent node in tree explorer Add button to re-enter program state when signals are received (i.e. SEGFAULT)","title":"0.7.9.1"},{"location":"changelog/#0790","text":"Add interactive tree explorer of variables","title":"0.7.9.0"},{"location":"changelog/#0783","text":"Remove optimization for fetching registers due to potential bug","title":"0.7.8.3"},{"location":"changelog/#0782","text":"bugfix in logic when jumping to source code line bugfix for when variable goes from empty -> 1 element add CODE OF CONDUCT, CONTRIBUTING, and CHANGELOG files","title":"0.7.8.2"},{"location":"changelog/#0781","text":"correctly display < and > in console widget","title":"0.7.8.1"},{"location":"changelog/#0780","text":"show disassembly when file is unknown or missing show new children in expressions widget when they are dynamically added by application (@wuyihao) suppress nuisance errors when hover variable or fflush command is not found improve logic when source code line should be jumped to escape brackets in disassembly, and gracefully hide missing opcodes update socketio version for more reliable websocket connection","title":"0.7.8.0"},{"location":"changelog/#0770","text":"Show variable values when hovering in source code gracefully handle hostname not being present in /etc/hosts when running with remote flag Use external state management library ( stator.js ) for client ui","title":"0.7.7.0"},{"location":"contact/","text":"Email: chadsmith.software@gmail.com","title":"Contact"},{"location":"contributing/","text":"Thanks for your interest in contributing to gdbgui! If your change is small, go ahead and submit a pull request. If it is substantial, create a GitHub issue to discuss it before making the change. Dependencies 1.) nox is used to automate various tasks. You will need it installed on your system before continuing. You can install it with pipx (recommended): > pipx install nox or pip: > pip install --user nox 2.) yarn is used for managing JavaScript files Developing Development can be done with one simple step: > nox -s develop This will install all Python and JavaScript dependencies, and build and watch Python and JavaScript files for changes, automatically reloading as things are changed. Make sure you turn your cache off so that changes made locally are reflected in the page. Running and Adding tests > nox runs all applicable tests and linting. Python tests are in gdbgui/tests . They are run as part of the above command, but can be run with > nox -s python_tests JavaScript tests are in gdbgui/src/js/tests . They are run as part of the above command, but can be run with > nox -s js_tests Documentation Modifying Documentation Documentation is made with mkdocs . Then make changes to mkdocs.yml or md files in the docs directory. To build docs, run nox -s docs To see a live preview of current documentation, run nox -s watch_docs Publishing Documentation The generated documentation is published to the gh-pages branch. nox -s publish_docs Building Binary Executables These are automatically built on CI, but can be built locally with corresponding nox commands, such as: nox -s build_executable_current_platform Publishing a New Version Make sure the version number is incremented in VERSION.txt . The version to release must be on the master branch and have all CI tests pass and new binary executable artifacts attached to the GitHub action results Publish the package to PyPI and update documentation. Both are done with this nox -s publish . Create a \"release\" in GitHub and attach the gdbgui binary executable artifacts to it.","title":"Contributing"},{"location":"contributing/#dependencies","text":"1.) nox is used to automate various tasks. You will need it installed on your system before continuing. You can install it with pipx (recommended): > pipx install nox or pip: > pip install --user nox 2.) yarn is used for managing JavaScript files","title":"Dependencies"},{"location":"contributing/#developing","text":"Development can be done with one simple step: > nox -s develop This will install all Python and JavaScript dependencies, and build and watch Python and JavaScript files for changes, automatically reloading as things are changed. Make sure you turn your cache off so that changes made locally are reflected in the page.","title":"Developing"},{"location":"contributing/#running-and-adding-tests","text":"> nox runs all applicable tests and linting. Python tests are in gdbgui/tests . They are run as part of the above command, but can be run with > nox -s python_tests JavaScript tests are in gdbgui/src/js/tests . They are run as part of the above command, but can be run with > nox -s js_tests","title":"Running and Adding tests"},{"location":"contributing/#documentation","text":"","title":"Documentation"},{"location":"contributing/#modifying-documentation","text":"Documentation is made with mkdocs . Then make changes to mkdocs.yml or md files in the docs directory. To build docs, run nox -s docs To see a live preview of current documentation, run nox -s watch_docs","title":"Modifying Documentation"},{"location":"contributing/#publishing-documentation","text":"The generated documentation is published to the gh-pages branch. nox -s publish_docs","title":"Publishing Documentation"},{"location":"contributing/#building-binary-executables","text":"These are automatically built on CI, but can be built locally with corresponding nox commands, such as: nox -s build_executable_current_platform","title":"Building Binary Executables"},{"location":"contributing/#publishing-a-new-version","text":"Make sure the version number is incremented in VERSION.txt . The version to release must be on the master branch and have all CI tests pass and new binary executable artifacts attached to the GitHub action results Publish the package to PyPI and update documentation. Both are done with this nox -s publish . Create a \"release\" in GitHub and attach the gdbgui binary executable artifacts to it.","title":"Publishing a New Version"},{"location":"examples/","text":"Examples Code Examples View code examples on GitHub . gdbgui Invocation Examples launch gdbgui gdbgui set the inferior program, pass argument, set a breakpoint at main gdbgui --args ./myprogram myarg -myflag gdbgui \"./myprogram myarg -myflag\" use gdb binary not on your $PATH gdbgui --gdb-cmd build/mygdb Pass arbitrary arguments directly to gdb when it is launched gdbgui --gdb-cmd=\"gdb -x gdbcmds.txt\" run on port 8080 instead of the default port gdbgui --port 8080 run on a server and host on 0.0.0.0. Accessible to the outside world as long as port 80 is not blocked. gdbgui -r Same as previous but will prompt for a username and password gdbgui -r --auth Same as previous but with encrypted https connection. openssl req -newkey rsa:2048 -nodes -keyout private.key -x509 -days 365 -out host.cert gdbgui -r --auth --key private.key --cert host.cert Use Mozilla's record and replay (rr) debugging supplement to gdb. rr lets your record a program (usually with a hard-to-reproduce bug in it), then deterministically replay it as many times as you want. You can even step forwards and backwards. gdbgui --gdb-cmd \"rr replay --\" Use recording other than the most recent one gdbgui --gdb-cmd \"rr replay RECORDED_DIRECTORY --\" Don't automatically open the browser when launching gdbgui -n","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#code-examples","text":"View code examples on GitHub .","title":"Code Examples"},{"location":"examples/#gdbgui-invocation-examples","text":"launch gdbgui gdbgui set the inferior program, pass argument, set a breakpoint at main gdbgui --args ./myprogram myarg -myflag gdbgui \"./myprogram myarg -myflag\" use gdb binary not on your $PATH gdbgui --gdb-cmd build/mygdb Pass arbitrary arguments directly to gdb when it is launched gdbgui --gdb-cmd=\"gdb -x gdbcmds.txt\" run on port 8080 instead of the default port gdbgui --port 8080 run on a server and host on 0.0.0.0. Accessible to the outside world as long as port 80 is not blocked. gdbgui -r Same as previous but will prompt for a username and password gdbgui -r --auth Same as previous but with encrypted https connection. openssl req -newkey rsa:2048 -nodes -keyout private.key -x509 -days 365 -out host.cert gdbgui -r --auth --key private.key --cert host.cert Use Mozilla's record and replay (rr) debugging supplement to gdb. rr lets your record a program (usually with a hard-to-reproduce bug in it), then deterministically replay it as many times as you want. You can even step forwards and backwards. gdbgui --gdb-cmd \"rr replay --\" Use recording other than the most recent one gdbgui --gdb-cmd \"rr replay RECORDED_DIRECTORY --\" Don't automatically open the browser when launching gdbgui -n","title":"gdbgui Invocation Examples"},{"location":"faq/","text":"How can I see what commands are being sent to gdb? Go to Settings and check the box that says Print all sent commands in console, including those sent automatically by gdbgui How can I see gdb's raw output? Launch gdbgui with the debug flag, gdbgui --debug , then a new component will appear on the bottom right side of UI. Can I use a different gdb executable? Yes, use gdbgui -g <gdb executable> Does this work with LLDB? No, only gdb. Can this debug Python? No. It uses gdb on the backend which does not debug Python code. How do I make program output appear in a different terminal? On linux terminals are named. You can get a terminal's name by running tty which will print something like /dev/ttys3 . Tell gdb to use the terminal gdbgui was launched from with gdbgui --gdb-args = \"--tty= $( tty ) \" or if you want to set it from the UI after gdbgui has been opened, run set inferior-tty /dev/ttys3 # replace /dev/ttys3 with desired tty name Help! There isn't a button for something I want to do. What should I do? The vast majority of common use cases are handled in the UI, and to keep the UI somewhat simple I do not intend on making UI support for every single gdb command. You can search gdb documentation and use any gdb command you want in the console at the bottom of the window. If you think there should be a UI element for a command or function, create an issue on GitHub and I will consider it.","title":"FAQ"},{"location":"faq/#how-can-i-see-what-commands-are-being-sent-to-gdb","text":"Go to Settings and check the box that says Print all sent commands in console, including those sent automatically by gdbgui","title":"How can I see what commands are being sent to gdb?"},{"location":"faq/#how-can-i-see-gdbs-raw-output","text":"Launch gdbgui with the debug flag, gdbgui --debug , then a new component will appear on the bottom right side of UI.","title":"How can I see gdb's raw output?"},{"location":"faq/#can-i-use-a-different-gdb-executable","text":"Yes, use gdbgui -g <gdb executable>","title":"Can I use a different gdb executable?"},{"location":"faq/#does-this-work-with-lldb","text":"No, only gdb.","title":"Does this work with LLDB?"},{"location":"faq/#can-this-debug-python","text":"No. It uses gdb on the backend which does not debug Python code.","title":"Can this debug Python?"},{"location":"faq/#how-do-i-make-program-output-appear-in-a-different-terminal","text":"On linux terminals are named. You can get a terminal's name by running tty which will print something like /dev/ttys3 . Tell gdb to use the terminal gdbgui was launched from with gdbgui --gdb-args = \"--tty= $( tty ) \" or if you want to set it from the UI after gdbgui has been opened, run set inferior-tty /dev/ttys3 # replace /dev/ttys3 with desired tty name","title":"How do I make program output appear in a different terminal?"},{"location":"faq/#help-there-isnt-a-button-for-something-i-want-to-do-what-should-i-do","text":"The vast majority of common use cases are handled in the UI, and to keep the UI somewhat simple I do not intend on making UI support for every single gdb command. You can search gdb documentation and use any gdb command you want in the console at the bottom of the window. If you think there should be a UI element for a command or function, create an issue on GitHub and I will consider it.","title":"Help! There isn't a button for something I want to do. What should I do?"},{"location":"gettingstarted/","text":"Before running gdbgui , you should compile your program with debug symbols and a lower level of optimization, so code isn't optimized out before runtime. To include debug symbols with gcc use -ggdb , with rustc use -g . To disable most optimizations in gcc use the -O0 flag, with rustc use -O . For more details, consult your compiler's documentation or a search engine. Now that you have gdbgui installed and your program compiled with debug symbols, all you need to do is run gdbgui This will start gdbgui's server and open a new tab in your browser. That tab contains a fully functional frontend running gdb ! You can see gdbgui in action on YouTube . To see the full list of options gdbgui offers, you can view command line options by running gdbgui --help If you have a question about something Read documentation on the homepage Ask question in an issue on github Settings gdbgui settings can be accessed by clicking the gear icon in the top right of the frontend. Most of these settings persist between sessions for a given url and port. Keyboard Shortcuts The following keyboard shortcuts are available when the focus is not in an input field. They have the same effect as when the button is pressed. Run: r Continue: c Next: n or right arrow Step: s or down arrow Up: u or up arrow Next Instruction: m Step Instruction: ,","title":"Getting Started"},{"location":"gettingstarted/#settings","text":"gdbgui settings can be accessed by clicking the gear icon in the top right of the frontend. Most of these settings persist between sessions for a given url and port.","title":"Settings"},{"location":"gettingstarted/#keyboard-shortcuts","text":"The following keyboard shortcuts are available when the focus is not in an input field. They have the same effect as when the button is pressed. Run: r Continue: c Next: n or right arrow Step: s or down arrow Up: u or up arrow Next Instruction: m Step Instruction: ,","title":"Keyboard Shortcuts"},{"location":"guides/","text":"gdb can be used in a plethora of environments. These guides help you get gdb and gdbgui working in specific environments. Remember, these guides, like gdbgui, are open source and can be edited by you, the users! See contributing to modify these docs. Running Locally After downloading gdbgui, you can launch it like so: gdbgui (or whatever the binary name is, i.e. gdbgui_0.10.0.0 ) gdbgui --args ./mybinary -myarg value -flag1 -flag2 Make sure the program you want to debug was compiled with debug symbols. See the getting started section for more details. A new tab in your browser will open with gdbgui in it. If a browser tab did not open, navigate to the ip/port that gdbgui is being served on (i.e. http://localhost:5000). Now that gdbgui is open, you can interactively run a program with it. * Type the path to the executable in the input at the top (next to \"Load Binary\"). The executable should already exist and have been compiled with the -g flag. * Click Load Binary . The program and symbols will load, but will not begin running. A breakpoint will be added to main automatically. This can be changed in settings if you prefer not to do this. * The line of source code corresponding to main will display if the program was compiled with the -g flag debug symbols. * Click the Run button, which is on the top right and looks like a circular arrow. * Step through the program by clicking the Next, Step, Continue, icons as desired. These are also on the top right. For a list of gdbgui arguments, run gdbgui --help . Running Remotely Because gdbgui is a server, it naturally allows you to debug programs running on other computers. ssh into the computer with the program that needs to be debugged. run gdbgui -r on the remote machine (this will serve publicly so beware of security here) on your local machine, open your browser and access the remote machine's ip and port debug the remote computer in your local browser Note that gnu also distrubutes a program called gdbserver which gdbgui is compatible with. See the relevant section in this doc. Debugging Rust Programs gdbgui can be used to debug programs written in Rust. Assuming you use Cargo to create a new program and build it in Debug mode in the standard way: cargo new myprog cd myprog cargo build You can start debugging with gdbgui --args target/debug/myprog There are a couple of small difficulties. 1.) Instead of showing your main function the initial screen will be blank and gdbgui will print File not found: main . You need to help gdbgui out by typing main into the file browser box: and selecting the main.rs file. The source code should then appear in the browser and you can click to set breakpoints and run the program. Of course, if you want to break in some other file, you can find that in the file browser instead. Rust on macOS When you load your rust binary on a mac, you may see many warnings like this warning /Users/user/examples/rust/target/debug/deps/hello-486956f9dde465e5.9elsx31vb4it187.rcgu.o': can't open to read symbols: No such file or directory. Symbols are names of variables, functions and types defined in your program. You can define symbols for your program by loading symbol files. gdb usually does this automatically for you, but sometimes has trouble finding the right paths. In this case, you need to manually tell gdb where the symbol files is; it's usually the first part of the missing file. In the above example, it's hello-486956f9dde465e5.9elsx31vb4it187.rcgu.o . You can load this into gdb with the following command (changed as appropriate): symbol-file /Users/user/git/gdbgui/examples/rust/target/debug/deps/hello-486956f9dde465e5 2.) The GDB pretty-printing macros that Rust ships with. GDB can't find these by default, which makes it print the message warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts of file /home/temp/myprog/target/debug/myprog. Use `info auto-load python-scripts [REGEXP]' to list them. You can safely ignore this, but the Rust issue describes the workarounds necessary (create a .gdbinit file and paste a few lines into the Python helper script). On Windows Rust defaults to the MSVC toolchain, and gdbgui can't debug binaries compiled that way. If you want to use gdbgui , you'll have to switch to the GNU toolchain . If you want to debug programs compiled in Release mode, you will need to create a profile.release section in your Cargo.toml and add debug = true to it. See the Cargo manifest for details. and now gdb will be able to see which files were used to compile your binary, among other things. Connecting to gdbserver Like gdb, gdbserver is also made by gnu, but with the following important differences: it is much smaller than gdb it is easier to port to other architectures than all of gdb gdbserver runs on a remote machine or embedded target, which, as the name suggests, runs a server. gdb communicates with gdbserver so you can debug on your local machine. To do this, the remote machine must run the server and program: gdbserver :9000 mybinary.a Then you can launch gdb or gdbgui and connect to it. In gdbgui , use the dropdown to select Connect to gdbserver , and enter <remote ip address>:9000 Read more at the gdbserver homepage . If the machine gdbgui is running on and the target being debugged have different architectures, make sure gdb is built properly (see Remote Debugging Between Different Architectures ). Remote Debugging Between Different Architectures For example, this is useful if you are working from an x86_64 based PC gdb client with gdbgui, to ARM arch gdbserver. You need to build the gdb client with the --host and --target flags. You need to build the gdbserver for the correct architecture. Build the gdb client that gdbgui will use. This example applies to an x86_64 pc running gdbgui that connects to an arm device running gdbserver, so you will need to ensure the targets apply to the environments you are working in: downloaded latest gdb source code unzip it, go into folder 3. ./configure --host = x86_64-pc-linux-gnu --build = x86_64-pc-linux-gnu --target = arm-linux-gnuabi && make -j8 && sudo make install Now arm-linux-gnuabi-gdb is installed by default to /usr/local/bin , but you can instead provide prefix=<path> to where you want it to install in the ./configure script above The arm-linux-gnuabi-gdb binary can now be used by gdbgui to connect to the ARM device: gdbgui -g arm-linux-gnuabi-gdb Links: * Building GDB and GDBserver for cross debugging * http://www.brain-dump.org/blog/entry/138/Cross_Arch_Remote_Debugging_with_gdb_and_gdbserver * support remote debug from x86_64 based PC gdb client with gdbgui, to ARM arch gdbserver (multiarch)","title":"Guides"},{"location":"guides/#running-locally","text":"After downloading gdbgui, you can launch it like so: gdbgui (or whatever the binary name is, i.e. gdbgui_0.10.0.0 ) gdbgui --args ./mybinary -myarg value -flag1 -flag2 Make sure the program you want to debug was compiled with debug symbols. See the getting started section for more details. A new tab in your browser will open with gdbgui in it. If a browser tab did not open, navigate to the ip/port that gdbgui is being served on (i.e. http://localhost:5000). Now that gdbgui is open, you can interactively run a program with it. * Type the path to the executable in the input at the top (next to \"Load Binary\"). The executable should already exist and have been compiled with the -g flag. * Click Load Binary . The program and symbols will load, but will not begin running. A breakpoint will be added to main automatically. This can be changed in settings if you prefer not to do this. * The line of source code corresponding to main will display if the program was compiled with the -g flag debug symbols. * Click the Run button, which is on the top right and looks like a circular arrow. * Step through the program by clicking the Next, Step, Continue, icons as desired. These are also on the top right. For a list of gdbgui arguments, run gdbgui --help .","title":"Running Locally"},{"location":"guides/#running-remotely","text":"Because gdbgui is a server, it naturally allows you to debug programs running on other computers. ssh into the computer with the program that needs to be debugged. run gdbgui -r on the remote machine (this will serve publicly so beware of security here) on your local machine, open your browser and access the remote machine's ip and port debug the remote computer in your local browser Note that gnu also distrubutes a program called gdbserver which gdbgui is compatible with. See the relevant section in this doc.","title":"Running Remotely"},{"location":"guides/#debugging-rust-programs","text":"gdbgui can be used to debug programs written in Rust. Assuming you use Cargo to create a new program and build it in Debug mode in the standard way: cargo new myprog cd myprog cargo build You can start debugging with gdbgui --args target/debug/myprog There are a couple of small difficulties. 1.) Instead of showing your main function the initial screen will be blank and gdbgui will print File not found: main . You need to help gdbgui out by typing main into the file browser box: and selecting the main.rs file. The source code should then appear in the browser and you can click to set breakpoints and run the program. Of course, if you want to break in some other file, you can find that in the file browser instead.","title":"Debugging Rust Programs"},{"location":"guides/#rust-on-macos","text":"When you load your rust binary on a mac, you may see many warnings like this warning /Users/user/examples/rust/target/debug/deps/hello-486956f9dde465e5.9elsx31vb4it187.rcgu.o': can't open to read symbols: No such file or directory. Symbols are names of variables, functions and types defined in your program. You can define symbols for your program by loading symbol files. gdb usually does this automatically for you, but sometimes has trouble finding the right paths. In this case, you need to manually tell gdb where the symbol files is; it's usually the first part of the missing file. In the above example, it's hello-486956f9dde465e5.9elsx31vb4it187.rcgu.o . You can load this into gdb with the following command (changed as appropriate): symbol-file /Users/user/git/gdbgui/examples/rust/target/debug/deps/hello-486956f9dde465e5 2.) The GDB pretty-printing macros that Rust ships with. GDB can't find these by default, which makes it print the message warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts of file /home/temp/myprog/target/debug/myprog. Use `info auto-load python-scripts [REGEXP]' to list them. You can safely ignore this, but the Rust issue describes the workarounds necessary (create a .gdbinit file and paste a few lines into the Python helper script). On Windows Rust defaults to the MSVC toolchain, and gdbgui can't debug binaries compiled that way. If you want to use gdbgui , you'll have to switch to the GNU toolchain . If you want to debug programs compiled in Release mode, you will need to create a profile.release section in your Cargo.toml and add debug = true to it. See the Cargo manifest for details. and now gdb will be able to see which files were used to compile your binary, among other things.","title":"Rust on macOS"},{"location":"guides/#connecting-to-gdbserver","text":"Like gdb, gdbserver is also made by gnu, but with the following important differences: it is much smaller than gdb it is easier to port to other architectures than all of gdb gdbserver runs on a remote machine or embedded target, which, as the name suggests, runs a server. gdb communicates with gdbserver so you can debug on your local machine. To do this, the remote machine must run the server and program: gdbserver :9000 mybinary.a Then you can launch gdb or gdbgui and connect to it. In gdbgui , use the dropdown to select Connect to gdbserver , and enter <remote ip address>:9000 Read more at the gdbserver homepage . If the machine gdbgui is running on and the target being debugged have different architectures, make sure gdb is built properly (see Remote Debugging Between Different Architectures ).","title":"Connecting to gdbserver"},{"location":"guides/#remote-debugging-between-different-architectures","text":"For example, this is useful if you are working from an x86_64 based PC gdb client with gdbgui, to ARM arch gdbserver. You need to build the gdb client with the --host and --target flags. You need to build the gdbserver for the correct architecture. Build the gdb client that gdbgui will use. This example applies to an x86_64 pc running gdbgui that connects to an arm device running gdbserver, so you will need to ensure the targets apply to the environments you are working in: downloaded latest gdb source code unzip it, go into folder 3. ./configure --host = x86_64-pc-linux-gnu --build = x86_64-pc-linux-gnu --target = arm-linux-gnuabi && make -j8 && sudo make install Now arm-linux-gnuabi-gdb is installed by default to /usr/local/bin , but you can instead provide prefix=<path> to where you want it to install in the ./configure script above The arm-linux-gnuabi-gdb binary can now be used by gdbgui to connect to the ARM device: gdbgui -g arm-linux-gnuabi-gdb Links: * Building GDB and GDBserver for cross debugging * http://www.brain-dump.org/blog/entry/138/Cross_Arch_Remote_Debugging_with_gdb_and_gdbserver * support remote debug from x86_64 based PC gdb client with gdbgui, to ARM arch gdbserver (multiarch)","title":"Remote Debugging Between Different Architectures"},{"location":"howitworks/","text":"gdbgui consists of two main parts: the frontend and the backend Backend The backend is written in Python and consists of a Flask server with websocket capability thanks to the python-socketio package. When a new websocket connection from a browser is established, the server starts a new gdb subprocess and associates it with this websocket. This gdb process is told to use gdb's machine interface interpreter, which enables gdb's input and output to be programatically parsed so you can write code to do further processing with it, such as build a user interface. The pygdbmi library is used to manage the gdb subprocess and parse its output. It returns key/value pairs (dictionaries) that can be used to create a frontend. I wrote pygdbmi as a building block for gdbgui, but it is useful for any type of programmatic control over gdb. In summary, the backend is used to: create endpoints for the browser, including http and websocket. The server can access the operating system and do things like read source files or send signals to processes. create a managed gdb subprocess and parse output with pygdbmi spawn a separate thread to constantly check for output from the gdb subprocess forward output to the client through a websocket as it is parsed in the reader thread Frontend The frontend is written in JavaScript and uses React. It establishes a websocket connection to the server, at which time the server starts a new gdb subprocess for that particular websocket connection as mentioned above. Commands can be sent from the browser through the websocket to the server which writes to gdb, and output from gdb is forwarded from the server through the websocket to the browser. As the browser receives websocket messages from the server, it maintains the state of gdb, such as whether it's running, paused, or exited, where breakpoints are, what the stack is, etc. As this state changes, React performs the necessary DOM updates. In summary, the frontend is used to: Convert key/value pairs of gdb's machine interface output into a user interface Maintain the state of gdb Provide UI elements that can send gdb machine interface commands to gdb","title":"How it Works"},{"location":"howitworks/#backend","text":"The backend is written in Python and consists of a Flask server with websocket capability thanks to the python-socketio package. When a new websocket connection from a browser is established, the server starts a new gdb subprocess and associates it with this websocket. This gdb process is told to use gdb's machine interface interpreter, which enables gdb's input and output to be programatically parsed so you can write code to do further processing with it, such as build a user interface. The pygdbmi library is used to manage the gdb subprocess and parse its output. It returns key/value pairs (dictionaries) that can be used to create a frontend. I wrote pygdbmi as a building block for gdbgui, but it is useful for any type of programmatic control over gdb. In summary, the backend is used to: create endpoints for the browser, including http and websocket. The server can access the operating system and do things like read source files or send signals to processes. create a managed gdb subprocess and parse output with pygdbmi spawn a separate thread to constantly check for output from the gdb subprocess forward output to the client through a websocket as it is parsed in the reader thread","title":"Backend"},{"location":"howitworks/#frontend","text":"The frontend is written in JavaScript and uses React. It establishes a websocket connection to the server, at which time the server starts a new gdb subprocess for that particular websocket connection as mentioned above. Commands can be sent from the browser through the websocket to the server which writes to gdb, and output from gdb is forwarded from the server through the websocket to the browser. As the browser receives websocket messages from the server, it maintains the state of gdb, such as whether it's running, paused, or exited, where breakpoints are, what the stack is, etc. As this state changes, React performs the necessary DOM updates. In summary, the frontend is used to: Convert key/value pairs of gdb's machine interface output into a user interface Maintain the state of gdb Provide UI elements that can send gdb machine interface commands to gdb","title":"Frontend"},{"location":"installation/","text":"gdbgui installation There are a few ways to install gdbgui on your machine. There is even a way to run gdbgui without installing it. Read on to to find the one that's right for you. Method 1: Using pipx (recommended) gdbgui recommends using pipx , a program to run Python CLI binaries in isolated environments. You can install pipx like this: python3 -m pip install --user pipx python3 -m userpath append ~/.local/bin Restart/re-source your console to make sure the userpath is up to date. Then, install gdbgui with pipx: pipx install gdbgui To upgrade run pipx upgrade gdbgui When installation is finished, type gdbgui from the command line to run it, or gdbgui -h for help. To uninstall, run pipx uninstall gdbgui Try Without Installing By using pipx , you can run Python CLI programs in ephemeral one-time virtual environments. pipx run gdbgui A new tab running the latest version of gdbgui will open in your browser. Press CTRL+C to end the process, and your system will remain untouched. Method 2: Using pip pip is a popular installer for Python packages. gdbgui is a Python package and as such can be installed with pip, though we recommend using pipx rather than pip if possible. If you prefer to use Virtual Environments, you can activate one and then run pip install gdbgui You can get upgrades with pip install --upgrade gdbgui To uninstall, run pip uninstall gdbgui Method 3: Download and Run Binary Executable Download and run the binary executable for your system from GitHub Releases . System Dependencies for Python Package Note that this only applies if you are installing the Python package, and not using the binary executable. gdb (gnu debugger) Python 3.4+ (recommended) or 2.7 pip version 8 or higher Linux Dependencies sudo apt-get install gdb python3 macOS Dependencies brew install python3 brew install gdb --with-python --with-all-targets macOS users must also codesign gdb: follow these instructions . This will fix the error please check gdb is codesigned - see taskgated(8) . Windows Dependencies Note that windows is only supported for gdbgui versions less than 0.14. Python 3 gdb, make, gcc If you do not have already have gdb/make/gcc installed, there are two options to install them on Windows: MinGW and cygwin . MinGW (recommended) Minimal GNU for Windows ( MinGW ) is the recommended Windows option. Install MinGW with the \"MinGW Base System\" package. This is the default package which contains make , gcc , and gdb . It will install to somewhere like C:\\MinGW\\bin\\... . For example C:\\MinGW\\bin\\gdb.exe , C:\\MinGW\\bin\\mingw32-make.exe , etc. Ensure this MinGW binary directory (i.e. C:\\MinGW\\bin\\ ) is on your \"Path\" environment variable: Go to Control Panel > System Properties > Environment Variables > System Variables > Path and make sure C:\\MinGW\\bin\\ is added to that list. If it is not added to your \"Path\", you will have to run gdbgui with the path explicitly called out, such as gdbgui -g C:\\MinGW\\bin\\gdb.exe . Cygwin Cygwin is a more UNIX-like compatibility layer on Windows, and gdbgui works with it as well. Install cygwin When installing cygwin packages, add the following: python3 python3-pip python3-devel gdb gcc-core gcc-g++ Running from Source See the contributing section.","title":"Installation"},{"location":"installation/#gdbgui-installation","text":"There are a few ways to install gdbgui on your machine. There is even a way to run gdbgui without installing it. Read on to to find the one that's right for you.","title":"gdbgui installation"},{"location":"installation/#method-1-using-pipx-recommended","text":"gdbgui recommends using pipx , a program to run Python CLI binaries in isolated environments. You can install pipx like this: python3 -m pip install --user pipx python3 -m userpath append ~/.local/bin Restart/re-source your console to make sure the userpath is up to date. Then, install gdbgui with pipx: pipx install gdbgui To upgrade run pipx upgrade gdbgui When installation is finished, type gdbgui from the command line to run it, or gdbgui -h for help. To uninstall, run pipx uninstall gdbgui","title":"Method 1: Using pipx (recommended)"},{"location":"installation/#try-without-installing","text":"By using pipx , you can run Python CLI programs in ephemeral one-time virtual environments. pipx run gdbgui A new tab running the latest version of gdbgui will open in your browser. Press CTRL+C to end the process, and your system will remain untouched.","title":"Try Without Installing"},{"location":"installation/#method-2-using-pip","text":"pip is a popular installer for Python packages. gdbgui is a Python package and as such can be installed with pip, though we recommend using pipx rather than pip if possible. If you prefer to use Virtual Environments, you can activate one and then run pip install gdbgui You can get upgrades with pip install --upgrade gdbgui To uninstall, run pip uninstall gdbgui","title":"Method 2: Using pip"},{"location":"installation/#method-3-download-and-run-binary-executable","text":"Download and run the binary executable for your system from GitHub Releases .","title":"Method 3: Download and Run Binary Executable"},{"location":"installation/#system-dependencies-for-python-package","text":"Note that this only applies if you are installing the Python package, and not using the binary executable. gdb (gnu debugger) Python 3.4+ (recommended) or 2.7 pip version 8 or higher","title":"System Dependencies for Python Package"},{"location":"installation/#linux-dependencies","text":"sudo apt-get install gdb python3","title":"Linux Dependencies"},{"location":"installation/#macos-dependencies","text":"brew install python3 brew install gdb --with-python --with-all-targets macOS users must also codesign gdb: follow these instructions . This will fix the error please check gdb is codesigned - see taskgated(8) .","title":"macOS Dependencies"},{"location":"installation/#windows-dependencies","text":"Note that windows is only supported for gdbgui versions less than 0.14. Python 3 gdb, make, gcc If you do not have already have gdb/make/gcc installed, there are two options to install them on Windows: MinGW and cygwin .","title":"Windows Dependencies"},{"location":"installation/#mingw-recommended","text":"Minimal GNU for Windows ( MinGW ) is the recommended Windows option. Install MinGW with the \"MinGW Base System\" package. This is the default package which contains make , gcc , and gdb . It will install to somewhere like C:\\MinGW\\bin\\... . For example C:\\MinGW\\bin\\gdb.exe , C:\\MinGW\\bin\\mingw32-make.exe , etc. Ensure this MinGW binary directory (i.e. C:\\MinGW\\bin\\ ) is on your \"Path\" environment variable: Go to Control Panel > System Properties > Environment Variables > System Variables > Path and make sure C:\\MinGW\\bin\\ is added to that list. If it is not added to your \"Path\", you will have to run gdbgui with the path explicitly called out, such as gdbgui -g C:\\MinGW\\bin\\gdb.exe .","title":"MinGW (recommended)"},{"location":"installation/#cygwin","text":"Cygwin is a more UNIX-like compatibility layer on Windows, and gdbgui works with it as well. Install cygwin When installing cygwin packages, add the following: python3 python3-pip python3-devel gdb gcc-core gcc-g++","title":"Cygwin"},{"location":"installation/#running-from-source","text":"See the contributing section.","title":"Running from Source"},{"location":"screenshots/","text":"Enter the binary and args just as you'd call them on the command line. The binary is restored when gdbgui is opened at a later time. Intuitive control of your program. From left to right: Run, Continue, Next, Step, Return, Next Instruction, Step Instruction. If the environment supports reverse debugging, such as when using an Intel CPU and running Linux and debugging with rr , gdbgui allows you to debug in reverse. Stack/Threads View all threads, the full stack on the active thread, the current frame on inactive threads. Switch between frames on the stack, or threads by pointing and clicking. Send Signal to Inferior (debugged) Process Choose from any signal your OS supports to send to the inferior. For example, to mock CTRL+C in plain gdb, you can send SIGINT to interrupt the inferior process. If the inferior process is hung for some reason, you can send SIGKILL , etc. Source Code View source, assembly, add breakpoints. All symbols used to compile the target are listed in a dropdown above the source code viewer, and have autocompletion capabilities. There are two different color schemes: dark (monokai), and a light theme (default). With assembly. Note the bold line is the current instruction that gdb is stopped on. If the source file is not found, it will display assembly, and allow you to step through it as desired. Variables and Expressions All local variables are automatically displayed, and are clickable to explore their fields. Hover over a variable and explore it, just like in the Chrome debugger. Arbitrary expressions can be evaluated as well. These expressions persist as the program is stepped through. The base/radix can be modified as desired. Expressions record their previous values, and can be displayed in an x/y plot. Expressions can be interactively explored in a tree view. Memory Viewer All hex addresses are automatically converted to clickable links to explore memory. Length of memory is configurable. In this case 10 bytes are displayed per row. Registers View all registers. If a register was updated it is highlighted in yellow. gdb console Prints gdb output Allows you to write directly to the underlying gdb subprocess as if you were using it in the terminal Tab completion works, and displays a button to view help on gdb commands Can be used to ease into learning gdb Can be used as a fallback for commands that don't have a UI widget History can be accessed using up/down arrows authentication Authentication can be enabled when serving on a publicly accessible IP address. See gdbgui --help for instructions on how to enable authentication. Dashboard A dashboard is available to let you look at all gdb instances managed by gdbgui. You can kill them, or attach to them. More than one person can attach to a managed gdb subprocess and participate in the debugging session simultaneously. i.e. if one person steps forward, all connected users see the program step forward in real time. gdbgui at launch","title":"Screenshot Tour"},{"location":"screenshots/#stackthreads","text":"View all threads, the full stack on the active thread, the current frame on inactive threads. Switch between frames on the stack, or threads by pointing and clicking.","title":"Stack/Threads"},{"location":"screenshots/#send-signal-to-inferior-debugged-process","text":"Choose from any signal your OS supports to send to the inferior. For example, to mock CTRL+C in plain gdb, you can send SIGINT to interrupt the inferior process. If the inferior process is hung for some reason, you can send SIGKILL , etc.","title":"Send Signal to Inferior (debugged) Process"},{"location":"screenshots/#source-code","text":"View source, assembly, add breakpoints. All symbols used to compile the target are listed in a dropdown above the source code viewer, and have autocompletion capabilities. There are two different color schemes: dark (monokai), and a light theme (default). With assembly. Note the bold line is the current instruction that gdb is stopped on. If the source file is not found, it will display assembly, and allow you to step through it as desired.","title":"Source Code"},{"location":"screenshots/#variables-and-expressions","text":"All local variables are automatically displayed, and are clickable to explore their fields. Hover over a variable and explore it, just like in the Chrome debugger. Arbitrary expressions can be evaluated as well. These expressions persist as the program is stepped through. The base/radix can be modified as desired. Expressions record their previous values, and can be displayed in an x/y plot. Expressions can be interactively explored in a tree view.","title":"Variables and Expressions"},{"location":"screenshots/#memory-viewer","text":"All hex addresses are automatically converted to clickable links to explore memory. Length of memory is configurable. In this case 10 bytes are displayed per row.","title":"Memory Viewer"},{"location":"screenshots/#registers","text":"View all registers. If a register was updated it is highlighted in yellow.","title":"Registers"},{"location":"screenshots/#gdb-console","text":"Prints gdb output Allows you to write directly to the underlying gdb subprocess as if you were using it in the terminal Tab completion works, and displays a button to view help on gdb commands Can be used to ease into learning gdb Can be used as a fallback for commands that don't have a UI widget History can be accessed using up/down arrows","title":"gdb console"},{"location":"screenshots/#authentication","text":"Authentication can be enabled when serving on a publicly accessible IP address. See gdbgui --help for instructions on how to enable authentication.","title":"authentication"},{"location":"screenshots/#dashboard","text":"A dashboard is available to let you look at all gdb instances managed by gdbgui. You can kill them, or attach to them. More than one person can attach to a managed gdb subprocess and participate in the debugging session simultaneously. i.e. if one person steps forward, all connected users see the program step forward in real time.","title":"Dashboard"},{"location":"screenshots/#gdbgui-at-launch","text":"","title":"gdbgui at launch"}]}